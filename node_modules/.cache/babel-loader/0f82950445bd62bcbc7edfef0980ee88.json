{"ast":null,"code":"var _slicedToArray = require(\"/Users/keremmican/Downloads/argon-dashboard-react-master/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('reactstrap'), require('prop-types')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'reactstrap', 'prop-types'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactstrapDatePicker = {}, global.React, global.Reactstrap, global.PropTypes));\n})(this, function (exports, React, reactstrap, PropTypes) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n  var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);\n\n  var useCheckProps = function useCheckProps(value, defaultValue) {\n    if (value && defaultValue) {\n      return 'Conflicting DatePicker properties \\'value\\' and \\'defaultValue\\'';\n    }\n\n    return undefined;\n  };\n\n  var InputGroup = function InputGroup(_ref) {\n    var children = _ref.children,\n        customInputGroup = _ref.customInputGroup,\n        size = _ref.size,\n        inputId = _ref.inputId;\n\n    if (customInputGroup != undefined) {\n      return /*#__PURE__*/React__default[\"default\"].cloneElement(customInputGroup, {\n        children: children\n      });\n    }\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(reactstrap.InputGroup, {\n      size: size,\n      id: inputId,\n      className: \"rdp-input-group\"\n    }, children);\n  };\n\n  var InputOverlay = function InputOverlay(_ref) {\n    var overlayContainerRef = _ref.overlayContainerRef;\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      ref: overlayContainerRef,\n      className: \"rdp-overlay\"\n    });\n  };\n\n  var InputHidden = function InputHidden(_ref) {\n    var inputId = _ref.inputId,\n        name = _ref.name,\n        value = _ref.value,\n        formattedValue = _ref.formattedValue,\n        hiddenInputRef = _ref.hiddenInputRef;\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"input\", {\n      ref: hiddenInputRef,\n      type: \"hidden\",\n      className: \"rdp-hidden\",\n      id: inputId,\n      name: name,\n      value: value || '',\n      \"data-formattedvalue\": formattedValue\n    });\n  };\n\n  var InputClearButton = function InputClearButton(_ref) {\n    var inputValue = _ref.inputValue,\n        disabled = _ref.disabled,\n        clearButtonElement = _ref.clearButtonElement,\n        _onClick = _ref.onClick;\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      className: \"rdp-addon input-group-append\"\n    }, /*#__PURE__*/React__default[\"default\"].createElement(reactstrap.InputGroupText, {\n      onClick: function onClick() {\n        return disabled ? null : _onClick();\n      },\n      style: {\n        opacity: inputValue && !disabled ? 1 : 0.5,\n        cursor: inputValue && !disabled ? 'pointer' : 'not-allowed'\n      }\n    }, clearButtonElement));\n  };\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      enumerableOnly && (symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      })), keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n\n    return target;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var InputControlInput = function InputControlInput(_ref) {\n    var customControl = _ref.customControl,\n        controlId = _ref.controlId,\n        value = _ref.value,\n        required = _ref.required,\n        placeholder = _ref.placeholder,\n        inputRef = _ref.inputRef,\n        disabled = _ref.disabled,\n        className = _ref.className,\n        style = _ref.style,\n        autoFocus = _ref.autoFocus,\n        autoComplete = _ref.autoComplete,\n        valid = _ref.valid,\n        invalid = _ref.invalid,\n        onInvalid = _ref.onInvalid,\n        noValidate = _ref.noValidate,\n        onKeyDown = _ref.onKeyDown,\n        onFocus = _ref.onFocus,\n        onBlur = _ref.onBlur,\n        onChange = _ref.onChange;\n    var validityClassNames = \"\".concat(invalid === true ? 'is-invalid' : '', \" \").concat(valid === true ? 'is-valid' : '');\n\n    if (customControl != undefined) {\n      return /*#__PURE__*/React__default[\"default\"].cloneElement(customControl, {\n        id: controlId,\n        value: value || '',\n        required: required,\n        placeholder: placeholder,\n        ref: inputRef,\n        disabled: disabled,\n        className: \"rdp-form-control \".concat(className || '', \" \").concat(customControl.props.className || '', \" \").concat(validityClassNames),\n        style: _objectSpread2(_objectSpread2({}, customControl.props.style || {}), style || {}),\n        autoComplete: autoComplete,\n        onInvalid: onInvalid,\n        noValidate: noValidate,\n        onKeyDown: onKeyDown,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onChange: onChange\n      });\n    }\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(reactstrap.Input, {\n      id: controlId,\n      name: controlId,\n      value: value || '',\n      required: required,\n      placeholder: placeholder,\n      innerRef: inputRef,\n      disabled: disabled,\n      type: \"text\",\n      className: \"rdp-form-control \".concat(className || '', \" \").concat(validityClassNames),\n      style: style,\n      autoFocus: autoFocus,\n      autoComplete: autoComplete,\n      onInvalid: onInvalid,\n      noValidate: noValidate,\n      onKeyDown: onKeyDown,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange\n    });\n  };\n\n  var setTimeToNoon = function setTimeToNoon(date) {\n    if (!date) {\n      return null;\n    }\n\n    date.setHours(12 - date.getTimezoneOffset() / 60);\n    date.setMinutes(0);\n    date.setSeconds(0);\n    date.setMilliseconds(0);\n    return date;\n  };\n\n  var getDateFromIsoString = function getDateFromIsoString(isoString) {\n    return isoString ? setTimeToNoon(new Date(isoString)) : null;\n  }; //isoString ? new Date(`${isoString.slice(0,10)}T12:00:00.000Z`) : null\n\n\n  var getIsoStringFromDate = function getIsoStringFromDate(date) {\n    return date ? setTimeToNoon(date).toISOString() : null;\n  }; //date ? `${date.toISOString().slice(0,10)}T12:00:00.000Z` : null\n\n\n  var _makeInputValueString = function _makeInputValueString(date, separator, dateFormat) {\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n\n    if (dateFormat.match(/MM.DD.YYYY/)) {\n      return (month > 9 ? month : \"0\".concat(month)) + separator + (day > 9 ? day : \"0\".concat(day)) + separator + date.getFullYear();\n    } else if (dateFormat.match(/DD.MM.YYYY/)) {\n      return (day > 9 ? day : \"0\".concat(day)) + separator + (month > 9 ? month : \"0\".concat(month)) + separator + date.getFullYear();\n    } else {\n      return date.getFullYear() + separator + (month > 9 ? month : \"0\".concat(month)) + separator + (day > 9 ? day : \"0\".concat(day));\n    }\n  };\n\n  var useInputValues = function useInputValues(controlInputRef, value, defaultValue, minDate, maxDate, dateFormat, onClear, onChange) {\n    var _React$useState = React.useState(dateFormat.match(/[^A-Z]/)[0]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        separator = _React$useState2[0],\n        setSeparator = _React$useState2[1];\n\n    var _React$useState3 = React.useState(null),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        innerValue = _React$useState4[0],\n        setInnerValue = _React$useState4[1];\n\n    var _React$useState5 = React.useState(null),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        inputValue = _React$useState6[0],\n        setInputValue = _React$useState6[1];\n\n    var _React$useState7 = React.useState(null),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        displayDate = _React$useState8[0],\n        setDisplayDate = _React$useState8[1];\n\n    var _React$useState9 = React.useState(null),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        selectedDate = _React$useState10[0],\n        setSelectedDate = _React$useState10[1]; // handle props changes\n\n\n    React.useEffect(function () {\n      setSeparator(dateFormat.match(/[^A-Z]/)[0]);\n    }, [dateFormat]); // handle input values\n\n    React.useEffect(function () {\n      var isoString = value || defaultValue;\n      var minDate = getDateFromIsoString(minDate);\n      var maxDate = getDateFromIsoString(maxDate);\n      var nSelectedDate = getDateFromIsoString(isoString);\n      var nInnerValue = getIsoStringFromDate(nSelectedDate);\n      var nInputValue = isoString ? _makeInputValueString(nSelectedDate, separator, dateFormat) : null;\n      var nDisplayDate;\n\n      if (nSelectedDate) {\n        //nDisplayDate = new Date(nSelectedDate)\n        nDisplayDate = nSelectedDate;\n      } else {\n        var today = getDateFromIsoString(new Date().toISOString());\n\n        if (minDate && Date.parse(minDate) >= Date.parse(today)) {\n          nDisplayDate = minDate;\n        } else if (maxDate && Date.parse(maxDate) <= Date.parse(today)) {\n          nDisplayDate = maxDate;\n        } else {\n          nDisplayDate = today;\n        }\n      }\n\n      setInnerValue(nInnerValue);\n      setInputValue(nInputValue);\n      setSelectedDate(nSelectedDate);\n      setDisplayDate(nDisplayDate);\n    }, [value, defaultValue, minDate, maxDate, separator, dateFormat]); //\n\n    var handleClear =\n    /*useCallback(*/\n    function handleClear() {\n      if (onClear) {\n        onClear();\n      } else {\n        setInnerValue(null);\n        setInputValue(null);\n        setSelectedDate(null);\n        setDisplayDate(null);\n      }\n\n      if (onChange) {\n        onChange(null, null);\n      }\n    };\n    /*, [onClear, onChange])*/\n\n\n    var handleBadInput =\n    /*useCallback(*/\n    function handleBadInput(originalValue) {\n      var parts = originalValue.replace(new RegExp(\"[^0-9\".concat(separator, \"]\")), '').split(separator);\n\n      if (dateFormat.match(/MM.DD.YYYY/) || dateFormat.match(/DD.MM.YYYY/)) {\n        if (parts[0] && parts[0].length > 2) {\n          parts[1] = parts[0].slice(2) + (parts[1] || '');\n          parts[0] = parts[0].slice(0, 2);\n        }\n\n        if (parts[1] && parts[1].length > 2) {\n          parts[2] = parts[1].slice(2) + (parts[2] || '');\n          parts[1] = parts[1].slice(0, 2);\n        }\n\n        if (parts[2]) {\n          parts[2] = parts[2].slice(0, 4);\n        }\n      } else {\n        if (parts[0] && parts[0].length > 4) {\n          parts[1] = parts[0].slice(4) + (parts[1] || '');\n          parts[0] = parts[0].slice(0, 4);\n        }\n\n        if (parts[1] && parts[1].length > 2) {\n          parts[2] = parts[1].slice(2) + (parts[2] || '');\n          parts[1] = parts[1].slice(0, 2);\n        }\n\n        if (parts[2]) {\n          parts[2] = parts[2].slice(0, 2);\n        }\n      }\n\n      var nInputValue = parts.join(separator);\n      setInputValue(nInputValue);\n    };\n    /*, [dateFormat, separator])*/\n\n\n    var handleInputChange =\n    /*useCallback(*/\n    function handleInputChange() {\n      var originalValue = controlInputRef.current.value;\n      var nInputValue = originalValue.replace(/(-|\\/\\/)/g, separator).slice(0, 10);\n\n      if (!nInputValue) {\n        handleClear();\n        return;\n      }\n\n      var month, day, year;\n\n      if (dateFormat.match(/MM.DD.YYYY/)) {\n        if (!nInputValue.match(/[0-1][0-9].[0-3][0-9].[1-2][0-9][0-9][0-9]/)) {\n          return handleBadInput(originalValue);\n        }\n\n        month = nInputValue.slice(0, 2).replace(/[^0-9]/g, '');\n        day = nInputValue.slice(3, 5).replace(/[^0-9]/g, '');\n        year = nInputValue.slice(6, 10).replace(/[^0-9]/g, '');\n      } else if (dateFormat.match(/DD.MM.YYYY/)) {\n        if (!nInputValue.match(/[0-3][0-9].[0-1][0-9].[1-2][0-9][0-9][0-9]/)) {\n          return handleBadInput(originalValue);\n        }\n\n        day = nInputValue.slice(0, 2).replace(/[^0-9]/g, '');\n        month = nInputValue.slice(3, 5).replace(/[^0-9]/g, '');\n        year = nInputValue.slice(6, 10).replace(/[^0-9]/g, '');\n      } else {\n        if (!nInputValue.match(/[1-2][0-9][0-9][0-9].[0-1][0-9].[0-3][0-9]/)) {\n          return handleBadInput(originalValue);\n        }\n\n        year = nInputValue.slice(0, 4).replace(/[^0-9]/g, '');\n        month = nInputValue.slice(5, 7).replace(/[^0-9]/g, '');\n        day = nInputValue.slice(8, 10).replace(/[^0-9]/g, '');\n      }\n\n      var monthInteger = parseInt(month, 10);\n      var dayInteger = parseInt(day, 10);\n      var yearInteger = parseInt(year, 10);\n\n      if (monthInteger > 12 || dayInteger > 31) {\n        return handleBadInput(originalValue);\n      }\n\n      var beforeMinDate = minDate && Date.parse(originalValue) < Date.parse(minDate);\n      var afterMaxDate = maxDate && Date.parse(originalValue) > Date.parse(maxDate);\n\n      if (beforeMinDate || afterMaxDate) {\n        return handleBadInput(originalValue);\n      }\n\n      if (!isNaN(monthInteger) && !isNaN(dayInteger) && !isNaN(yearInteger) && monthInteger <= 12 && dayInteger <= 31 && yearInteger > 999) {\n        var nSelectedDate = getDateFromIsoString(new Date(yearInteger, monthInteger - 1, dayInteger, 12, 0, 0, 0).toISOString());\n        var nInnerValue = getIsoStringFromDate(nSelectedDate);\n        setSelectedDate(nSelectedDate);\n        setDisplayDate(nSelectedDate);\n        setInnerValue(nInnerValue);\n\n        if (onChange) {\n          onChange(nInnerValue, nInputValue);\n        }\n      }\n\n      setInputValue(nInputValue);\n    };\n    /*, [controlInputRef, separator, onChange, minDate, maxDate])*/\n\n\n    var handleChangeMonth = function handleChangeMonth(nDisplayDate) {\n      setDisplayDate(nDisplayDate);\n    };\n\n    var handleChangeDate =\n    /*useCallback(*/\n    function handleChangeDate(nSelectedDate) {\n      var nInnerValue = getIsoStringFromDate(nSelectedDate);\n\n      var nInputValue = _makeInputValueString(nSelectedDate, separator, dateFormat);\n\n      setInputValue(nInputValue);\n      setSelectedDate(nSelectedDate);\n      setDisplayDate(nSelectedDate);\n      setInnerValue(nInnerValue);\n\n      if (onChange) {\n        onChange(nInnerValue, nInputValue);\n      }\n    };\n    /*, [separator, dateFormat, onChange])*/\n\n\n    return [innerValue, inputValue, displayDate, selectedDate, handleClear, handleInputChange, handleChangeMonth, handleChangeDate];\n  };\n\n  var getInstanceCount = function getInstanceCount() {\n    if (typeof window === 'object') {\n      if (window._reactstrapDatePickerInstance == undefined) {\n        window._reactstrapDatePickerInstance = 0;\n      }\n\n      var next = window._reactstrapDatePickerInstance + 1;\n      window._reactstrapDatePickerInstance = next;\n      return next;\n    } else if (typeof process === 'object') {\n      if (process._reactstrapDatePickerInstance == undefined) {\n        process._reactstrapDatePickerInstance = 0;\n      }\n\n      var _next = process._reactstrapDatePickerInstance + 1;\n\n      process._reactstrapDatePickerInstance = _next;\n      return _next;\n    } else {\n      console.error(\"Reactstrap Date Picker cannot determine environment (it is neither browser's <window> nor Node's <process>).\");\n      return 1;\n    }\n  };\n\n  var _getIdSuffix = function _getIdSuffix(id, name) {\n    // Try <id> or <name> props to determine elements' id suffix\n    if (id != undefined && id != '') return id;\n    if (name != undefined && name != '') return name; // If none was passed, use global vars\n\n    var iCount = getInstanceCount();\n    return iCount.toString();\n  };\n\n  var _getInputIds = function _getInputIds(id, name, customControl) {\n    var _customControl$props;\n\n    var idSuffix = _getIdSuffix(id, name);\n\n    var group = \"rdp-input-group-\".concat(idSuffix);\n    var hidden = id != undefined ? id : \"rdp-hidden-\".concat(idSuffix);\n    var control = \"rdp-form-control-\".concat(idSuffix);\n\n    if (customControl != undefined && customControl !== null && customControl !== void 0 && (_customControl$props = customControl.props) !== null && _customControl$props !== void 0 && _customControl$props.id) {\n      control = customControl.props.id;\n    }\n\n    return [group, hidden, control];\n  };\n\n  var useInputIds = function useInputIds(id, name, customControl) {\n    var _React$useState11 = React.useState(_getInputIds(id, name, customControl)),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        inputIds = _React$useState12[0],\n        setInputIds = _React$useState12[1];\n\n    React.useEffect(function () {\n      setInputIds(_getInputIds(id, name, customControl));\n    }, [id, name, customControl]);\n    return inputIds;\n  };\n\n  var _getFixedDayLabels = function _getFixedDayLabels(dayLabels, weekStartsOn) {\n    if (weekStartsOn > 1) {\n      return dayLabels.slice(weekStartsOn).concat(dayLabels.slice(0, weekStartsOn));\n    }\n\n    if (weekStartsOn === 1) {\n      return dayLabels.slice(1).concat(dayLabels.slice(0, 1));\n    }\n\n    return dayLabels;\n  };\n\n  var useFixedDayLabels = function useFixedDayLabels(dayLabels, weekStartsOn) {\n    var _React$useState13 = React.useState(_getFixedDayLabels(dayLabels, weekStartsOn)),\n        _React$useState14 = _slicedToArray(_React$useState13, 2),\n        fixedDayLabels = _React$useState14[0],\n        setFixedDayLabels = _React$useState14[1];\n\n    React.useEffect(function () {\n      setFixedDayLabels(_getFixedDayLabels(dayLabels, weekStartsOn));\n    }, [dayLabels, weekStartsOn]);\n    return fixedDayLabels;\n  };\n\n  var compareMonths = function compareMonths(a, b) {\n    try {\n      var da = new Date(a);\n      var db = new Date(b);\n      var sameYear = da.getFullYear() == db.getFullYear();\n      var sameMonth = da.getMonth() == db.getMonth();\n      return sameMonth && sameYear;\n    } catch (e) {\n      console.error(e);\n      return true;\n    }\n  };\n\n  function CalendarHeader(_ref) {\n    var previousButtonElement = _ref.previousButtonElement,\n        nextButtonElement = _ref.nextButtonElement,\n        displayDate = _ref.displayDate,\n        minDate = _ref.minDate,\n        maxDate = _ref.maxDate,\n        onChange = _ref.onChange,\n        monthLabels = _ref.monthLabels;\n\n    var _React$useState15 = React.useState(false),\n        _React$useState16 = _slicedToArray(_React$useState15, 2),\n        displayingMinMonth = _React$useState16[0],\n        setDisplayingMinMonth = _React$useState16[1];\n\n    var _React$useState17 = React.useState(false),\n        _React$useState18 = _slicedToArray(_React$useState17, 2),\n        displayingMaxMonth = _React$useState18[0],\n        setDisplayingMaxMonth = _React$useState18[1];\n\n    var _React$useState19 = React.useState(''),\n        _React$useState20 = _slicedToArray(_React$useState19, 2),\n        title = _React$useState20[0],\n        setTitle = _React$useState20[1];\n\n    React.useEffect(function () {\n      if (displayDate == undefined) {\n        return;\n      }\n\n      if (!minDate) {\n        setDisplayingMinMonth(false);\n      } else {\n        setDisplayingMinMonth(compareMonths(displayDate, minDate));\n      }\n\n      if (!maxDate) {\n        setDisplayingMaxMonth(false);\n      } else {\n        setDisplayingMaxMonth(compareMonths(displayDate, maxDate));\n      }\n\n      try {\n        setTitle(\"\".concat(monthLabels[displayDate.getMonth()], \" \").concat(displayDate.getFullYear()));\n      } catch (e) {\n        console.error(e);\n      }\n    }, [displayDate, minDate, maxDate, monthLabels]);\n\n    var handleChangeMonth = function handleChangeMonth(inc) {\n      var newDisplayDate = new Date(displayDate);\n      newDisplayDate.setDate(1);\n      newDisplayDate.setMonth(newDisplayDate.getMonth() + inc);\n      onChange(newDisplayDate);\n    };\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      className: \"rdp-header text-center\"\n    }, /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      className: \"text-muted rdp-header-previous-wrapper\",\n      onClick: function onClick() {\n        return handleChangeMonth(-1);\n      },\n      style: {\n        cursor: 'pointer',\n        float: 'left',\n        userSelect: 'none'\n      }\n    }, displayingMinMonth ? null : previousButtonElement), /*#__PURE__*/React__default[\"default\"].createElement(\"span\", null, title), /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n      className: \"text-muted rdp-header-next-wrapper\",\n      onClick: function onClick() {\n        return handleChangeMonth(+1);\n      },\n      style: {\n        cursor: 'pointer',\n        float: 'right',\n        userSelect: 'none'\n      }\n    }, displayingMaxMonth ? null : nextButtonElement));\n  }\n\n  var CalendarSubHeader = function CalendarSubHeader(_ref) {\n    var dayLabels = _ref.dayLabels,\n        showWeeks = _ref.showWeeks,\n        cellPadding = _ref.cellPadding;\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"thead\", null, /*#__PURE__*/React__default[\"default\"].createElement(\"tr\", null, showWeeks ? /*#__PURE__*/React__default[\"default\"].createElement(\"td\", {\n      className: \"text-muted current-week\",\n      style: {\n        padding: cellPadding\n      }\n    }) : null, dayLabels.map(function (label, index) {\n      return /*#__PURE__*/React__default[\"default\"].createElement(\"td\", {\n        key: index,\n        className: \"text-muted\",\n        style: {\n          padding: cellPadding\n        }\n      }, /*#__PURE__*/React__default[\"default\"].createElement(\"small\", null, label));\n    })));\n  };\n\n  var CalendarDayOutOfMonth = function CalendarDayOutOfMonth() {\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"td\", null);\n  };\n\n  var CAL_DAY_CLASSNAME_BY_MODE = {\n    'normal': '',\n    'muted': 'text-muted',\n    'selected': 'bg-primary',\n    'current': 'text-primary'\n  };\n\n  var CalendarDayInMonth = function CalendarDayInMonth(_ref) {\n    var day = _ref.day,\n        mode = _ref.mode,\n        onDayClick = _ref.onDayClick,\n        cellPadding = _ref.cellPadding,\n        roundedCorners = _ref.roundedCorners;\n\n    var handleClick = function handleClick(ev) {\n      if (mode != 'muted') {\n        onDayClick(ev);\n      }\n    };\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"td\", {\n      \"data-day\": day,\n      onClick: handleClick,\n      style: {\n        cursor: mode == 'muted' ? 'default' : 'pointer',\n        padding: cellPadding,\n        borderRadius: roundedCorners ? '5px' : '0px'\n      },\n      className: CAL_DAY_CLASSNAME_BY_MODE[mode]\n    }, day);\n  };\n\n  var CalendarWeekNum = function CalendarWeekNum(_ref) {\n    var weekNum = _ref.weekNum,\n        cellPadding = _ref.cellPadding;\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"td\", {\n      style: {\n        padding: cellPadding,\n        fontSize: '0.8em',\n        color: 'darkgrey'\n      },\n      className: \"text-muted\"\n    }, weekNum);\n  };\n\n  var CalendarBody = function CalendarBody(_ref) {\n    var calendarDays = _ref.calendarDays,\n        showWeeks = _ref.showWeeks,\n        onDayClick = _ref.onDayClick,\n        cellPadding = _ref.cellPadding,\n        roundedCorners = _ref.roundedCorners;\n\n    if (!calendarDays) {\n      return /*#__PURE__*/React__default[\"default\"].createElement(\"tbody\", null);\n    }\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"tbody\", null, calendarDays.map(function (week, weekIndex) {\n      return /*#__PURE__*/React__default[\"default\"].createElement(\"tr\", {\n        key: \"rdp_calendar_week_\".concat(weekIndex)\n      }, showWeeks ? /*#__PURE__*/React__default[\"default\"].createElement(CalendarWeekNum, {\n        key: \"rdp_calendar_week_\".concat(weekIndex, \"_weeknum\"),\n        weekNum: week.weekNum,\n        cellPadding: cellPadding\n      }) : null, week.weekDays.map(function (weekDay, weekDayIndex) {\n        return weekDay.inMonth ? /*#__PURE__*/React__default[\"default\"].createElement(CalendarDayInMonth, {\n          key: \"rdp_calendar_week_\".concat(weekIndex, \"_day_\").concat(weekDayIndex),\n          day: weekDay.day,\n          mode: weekDay.mode,\n          onDayClick: onDayClick,\n          cellPadding: cellPadding,\n          roundedCorners: roundedCorners\n        }) : /*#__PURE__*/React__default[\"default\"].createElement(CalendarDayOutOfMonth, {\n          key: \"rdp_calendar_week_\".concat(weekIndex, \"_day_\").concat(weekDayIndex)\n        });\n      }));\n    }));\n  };\n\n  var CalendarFooter = function CalendarFooter(_ref) {\n    var dayLabels = _ref.dayLabels,\n        showWeeks = _ref.showWeeks,\n        handleTodayClick = _ref.handleTodayClick,\n        showTodayButton = _ref.showTodayButton,\n        todayButtonLabel = _ref.todayButtonLabel;\n\n    if (!showTodayButton) {\n      return null;\n    }\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"tfoot\", null, /*#__PURE__*/React__default[\"default\"].createElement(\"tr\", null, /*#__PURE__*/React__default[\"default\"].createElement(\"td\", {\n      colSpan: dayLabels.length + (showWeeks ? 1 : 0),\n      style: {\n        paddingTop: '9px'\n      }\n    }, /*#__PURE__*/React__default[\"default\"].createElement(reactstrap.Button, {\n      block: true,\n      size: \"sm\",\n      className: \"u-today-button\",\n      onClick: function onClick() {\n        return handleTodayClick();\n      }\n    }, todayButtonLabel))));\n  };\n\n  var DAYS_BY_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  /**\n    groupByWeeks: {\n     year,\n     month,\n     weeks: [\n        {weekNum: N,\n        wekDays: [\n          {inMonth: true, day: N, mode: ''}\n          or\n          {inMonth: false}\n          ]\n        },...\n        ]\n    }\n   */\n\n  function _groupByWeeks(year, month, weekStartsOn) {\n    if (year == undefined || month == undefined) {\n      return undefined;\n    }\n\n    var firstDay = new Date(year, month, 1);\n    var startingDay = weekStartsOn > 1 ? firstDay.getDay() - weekStartsOn + 7 : weekStartsOn === 1 ? firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1 : firstDay.getDay();\n    var monthLength = DAYS_BY_MONTH[month];\n\n    if (month == 1) {\n      if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n        monthLength = 29;\n      }\n    }\n\n    var isInMonth = function isInMonth(monthDay, weekIndex, weekDay) {\n      if (monthDay <= monthLength && (weekIndex > 0 || weekDay >= startingDay)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    var getWeekNumber = function getWeekNumber(monthDay) {\n      var date = new Date(year, month, monthDay - 1, 12, 0, 0, 0);\n      var target = new Date(date.valueOf());\n      var dayNr = (date.getDay() + 6) % 7;\n      target.setDate(target.getDate() - dayNr + 3);\n      var firstThursday = target.valueOf();\n      target.setMonth(0, 1);\n\n      if (target.getDay() !== 4) {\n        target.setMonth(0, 1 + (4 - target.getDay() + 7) % 7);\n      }\n\n      return 1 + Math.ceil((firstThursday - target) / 604800000);\n    };\n\n    var allWeeks = [];\n    var monthDay = 1;\n\n    for (var weekIndex = 0; weekIndex < 9; weekIndex++) {\n      var weekDays = [];\n\n      for (var weekDay = 0; weekDay <= 6; weekDay++) {\n        if (isInMonth(monthDay, weekIndex, weekDay)) {\n          weekDays.push({\n            inMonth: true,\n            day: monthDay\n          });\n          monthDay += 1;\n        } else {\n          weekDays.push({\n            inMonth: false\n          });\n        }\n      }\n\n      var weekNum = getWeekNumber(monthDay);\n      allWeeks.push({\n        weekDays: weekDays,\n        weekNum: weekNum\n      });\n\n      if (monthDay > monthLength) {\n        break;\n      }\n    }\n\n    return {\n      year: year,\n      month: month,\n      weeks: allWeeks\n    };\n  }\n  /**\n    calendarDays: [\n    {weekNum: N,\n     wekDays: [\n       {inMonth: true, day: N, mode: ''}\n       or\n       {inMonth: false}\n      ]\n    },...\n    ]\n   */\n\n\n  function _makeCalendarDays(groupByWeeks, selectedDate, minDate, maxDate) {\n    if (groupByWeeks == undefined) {\n      return [];\n    }\n\n    var getDayMode = function getDayMode(day) {\n      var date = setTimeToNoon(new Date(groupByWeeks.year, groupByWeeks.month, day, 12, 0, 0, 0)).toISOString();\n      var beforeMinDate = minDate != undefined ? Date.parse(date) < Date.parse(setTimeToNoon(new Date(minDate))) : false;\n      var afterMaxDate = maxDate != undefined ? Date.parse(date) > Date.parse(setTimeToNoon(new Date(maxDate))) : false;\n      var currentDate = setTimeToNoon(new Date());\n      var nSelectedDate = setTimeToNoon(new Date(selectedDate));\n\n      if (beforeMinDate || afterMaxDate) {\n        return 'muted';\n      } else if (Date.parse(date) === Date.parse(nSelectedDate)) {\n        return 'selected';\n      } else if (Date.parse(date) === Date.parse(currentDate)) {\n        return 'current';\n      } else {\n        return 'normal';\n      }\n    };\n\n    var calendarDays = [];\n    groupByWeeks.weeks.map(function (week) {\n      var weekNum = week.weekNum;\n      var weekDays = week.weekDays.map(function (weekDay) {\n        return _objectSpread2(_objectSpread2({}, weekDay), {}, {\n          mode: weekDay.inMonth ? getDayMode(weekDay.day) : undefined\n        });\n      });\n      calendarDays.push({\n        weekNum: weekNum,\n        weekDays: weekDays\n      });\n    });\n    return calendarDays;\n  }\n\n  function useCalendarDays(displayDate, selectedDate, minDate, maxDate, weekStartsOn) {\n    var _React$useState21 = React.useState(undefined),\n        _React$useState22 = _slicedToArray(_React$useState21, 2),\n        year = _React$useState22[0],\n        setYear = _React$useState22[1];\n\n    var _React$useState23 = React.useState(undefined),\n        _React$useState24 = _slicedToArray(_React$useState23, 2),\n        month = _React$useState24[0],\n        setMonth = _React$useState24[1];\n\n    var _React$useState25 = React.useState(undefined),\n        _React$useState26 = _slicedToArray(_React$useState25, 2),\n        groupByWeeks = _React$useState26[0],\n        setGroupByWeeks = _React$useState26[1];\n\n    var _React$useState27 = React.useState([]),\n        _React$useState28 = _slicedToArray(_React$useState27, 2),\n        calendarDays = _React$useState28[0],\n        setCalendarDays = _React$useState28[1];\n\n    React.useEffect(function () {\n      if (displayDate) {\n        setYear(displayDate.getFullYear());\n        setMonth(displayDate.getMonth());\n      }\n    }, [displayDate]);\n    React.useEffect(function () {\n      setGroupByWeeks(_groupByWeeks(year, month, weekStartsOn));\n    }, [year, month, weekStartsOn]);\n    React.useEffect(function () {\n      setCalendarDays(_makeCalendarDays(groupByWeeks, selectedDate, minDate, maxDate));\n    }, [groupByWeeks, selectedDate, minDate, maxDate]);\n    return calendarDays;\n  }\n\n  var Calendar = function Calendar(_ref) {\n    var selectedDate = _ref.selectedDate,\n        displayDate = _ref.displayDate,\n        minDate = _ref.minDate,\n        maxDate = _ref.maxDate,\n        onChange = _ref.onChange,\n        dayLabels = _ref.dayLabels,\n        cellPadding = _ref.cellPadding,\n        weekStartsOn = _ref.weekStartsOn,\n        showTodayButton = _ref.showTodayButton,\n        todayButtonLabel = _ref.todayButtonLabel,\n        roundedCorners = _ref.roundedCorners,\n        showWeeks = _ref.showWeeks,\n        monthLabels = _ref.monthLabels,\n        previousButtonElement = _ref.previousButtonElement,\n        nextButtonElement = _ref.nextButtonElement,\n        placement = _ref.placement,\n        open = _ref.open,\n        container = _ref.container,\n        target = _ref.target,\n        onChangeMonth = _ref.onChangeMonth;\n    var calendarDays = useCalendarDays(displayDate, selectedDate, minDate, maxDate, weekStartsOn);\n\n    var handleDayClick = function handleDayClick(e) {\n      var day = e.currentTarget.getAttribute('data-day');\n      var newSelectedDate = setTimeToNoon(new Date(displayDate));\n      newSelectedDate.setDate(day);\n      onChange(newSelectedDate);\n    };\n\n    var handleTodayClick = function handleTodayClick() {\n      var newSelectedDate = setTimeToNoon(new Date());\n      onChange(newSelectedDate);\n    };\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null, /*#__PURE__*/React__default[\"default\"].createElement(reactstrap.Popover, {\n      className: \"rdp-popover \".concat(placement) //toggle     = {() => handleHide()}\n      ,\n      isOpen: open,\n      container: container,\n      target: target,\n      placement: placement // delay      = {200} //  does not apply for us (manual triggering)\n\n    }, /*#__PURE__*/React__default[\"default\"].createElement(reactstrap.PopoverHeader, {\n      tag: \"div\"\n    }, /*#__PURE__*/React__default[\"default\"].createElement(CalendarHeader, {\n      previousButtonElement: previousButtonElement,\n      nextButtonElement: nextButtonElement,\n      displayDate: displayDate,\n      minDate: minDate,\n      maxDate: maxDate,\n      onChange: function onChange(newDisplayDate) {\n        return onChangeMonth(newDisplayDate);\n      },\n      monthLabels: monthLabels\n    })), /*#__PURE__*/React__default[\"default\"].createElement(reactstrap.PopoverBody, null, /*#__PURE__*/React__default[\"default\"].createElement(\"table\", {\n      className: \"rdp-calendar text-center\"\n    }, /*#__PURE__*/React__default[\"default\"].createElement(CalendarSubHeader, {\n      dayLabels: dayLabels,\n      showWeeks: showWeeks,\n      cellPadding: cellPadding\n    }), /*#__PURE__*/React__default[\"default\"].createElement(CalendarBody, {\n      calendarDays: calendarDays,\n      showWeeks: showWeeks,\n      onDayClick: handleDayClick,\n      cellPadding: cellPadding,\n      roundedCorners: roundedCorners\n    }), /*#__PURE__*/React__default[\"default\"].createElement(CalendarFooter, {\n      dayLabels: dayLabels,\n      showWeeks: showWeeks,\n      handleTodayClick: handleTodayClick,\n      showTodayButton: showTodayButton,\n      todayButtonLabel: todayButtonLabel\n    })))));\n  };\n\n  Calendar.propTypes = {\n    selectedDate: PropTypes__default[\"default\"].object,\n    displayDate: PropTypes__default[\"default\"].object,\n    //.isRequired,\n    minDate: PropTypes__default[\"default\"].string,\n    maxDate: PropTypes__default[\"default\"].string,\n    onChange: PropTypes__default[\"default\"].func.isRequired,\n    dayLabels: PropTypes__default[\"default\"].array.isRequired,\n    cellPadding: PropTypes__default[\"default\"].string.isRequired,\n    weekStartsOn: PropTypes__default[\"default\"].number,\n    showTodayButton: PropTypes__default[\"default\"].bool,\n    todayButtonLabel: PropTypes__default[\"default\"].string,\n    roundedCorners: PropTypes__default[\"default\"].bool,\n    showWeeks: PropTypes__default[\"default\"].bool,\n    monthLabels: PropTypes__default[\"default\"].array.isRequired,\n    previousButtonElement: PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].string, PropTypes__default[\"default\"].object]).isRequired,\n    nextButtonElement: PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].string, PropTypes__default[\"default\"].object]).isRequired,\n    placement: PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].string, PropTypes__default[\"default\"].func])\n  }; // We were previously using the hidden one, but I see no reasons.\n  // 'change' events would make sense on the hidden input, but focus\n  // control seems to be more on the control input.\n  // Anyway, this is not decided here, but when calling useCustomEvents()\n\n  var useCustomEvents = function useCustomEvents(inputRef, onBlur, onFocus) {\n    var customOnBlur = React.useCallback(function () {\n      if (onBlur) {\n        var event = document.createEvent('CustomEvent');\n        event.initEvent('Change Date', true, false);\n        inputRef.current.dispatchEvent(event);\n        onBlur(event);\n      }\n    }, [inputRef, onBlur]);\n    var customOnFocus = React.useCallback(function () {\n      if (onFocus) {\n        var event = document.createEvent('CustomEvent');\n        event.initEvent('Change Date', true, false);\n        inputRef.current.dispatchEvent(event);\n        onFocus(event);\n      }\n    }, [inputRef, onFocus]);\n    return [customOnBlur, customOnFocus];\n  };\n\n  var getMaybeFuncValue = function getMaybeFuncValue(value) {\n    var tag = Object.prototype.toString.call(value);\n    var isFunction = tag === '[object AsyncFunction]' || tag === '[object Function]' || tag === '[object GeneratorFunction]' || tag === '[object Proxy]';\n\n    if (isFunction) {\n      return value();\n    } else {\n      return value;\n    }\n  }; // We could handle by our own through ref callbacks\n  //   (https://blog.maisie.ink/react-ref-autofocus/)\n  // But let's just use react's autoFocus attribute by now\n\n\n  var useCalendarProps = function useCalendarProps(calendarPlacement, inputRef, autoFocus, onBlur, onFocus) {\n    var _React$useState29 = React.useState(false),\n        _React$useState30 = _slicedToArray(_React$useState29, 2),\n        open = _React$useState30[0],\n        setOpen = _React$useState30[1];\n\n    var _React$useState31 = React.useState(getMaybeFuncValue(calendarPlacement)),\n        _React$useState32 = _slicedToArray(_React$useState31, 2),\n        placement = _React$useState32[0],\n        setPlacement = _React$useState32[1];\n\n    var hiddenInputRef = React.useRef();\n    var overlayContainerRef = React.useRef();\n    var controlInputRef = inputRef || React.useRef(); // eslint-disable-line react-hooks/rules-of-hooks \n    // NOTE: do we want to use the controlInput or  the hiddenInput here?\n\n    var _useCustomEvents = useCustomEvents(\n    /*hiddenInputRef*/\n    controlInputRef, onBlur, onFocus),\n        _useCustomEvents2 = _slicedToArray(_useCustomEvents, 2),\n        customOnBlur = _useCustomEvents2[0],\n        customOnFocus = _useCustomEvents2[1]; // Control the click outside\n\n\n    React.useEffect(function () {\n      function handleClickOutside(event) {\n        event.stopPropagation();\n\n        if (open) {\n          if (overlayContainerRef && overlayContainerRef.current && !overlayContainerRef.current.contains(event.target)) {\n            setOpen(false);\n            customOnBlur();\n          }\n        }\n      }\n\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return function () {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [open, overlayContainerRef, customOnBlur]); //\n    //  This callback is bound to Calendar.Popover's toggle() method,\n    //    but seems it's unneccesary \n    //  Leaving, by now, this testimonial comments\n    //\n    //  const handleHide = () => {\n    //    let inputFocused = false\n    //    try {\n    //      inputFocused= controlInputRef.current==document.activeElement\n    //    } catch(e) {}\n    //    \n    //    if (inputFocused) {\n    //      return\n    //    }\n    //    setOpen(false)\n    //    customOnBlur()\n    //  }\n\n    var handleFocus = React.useCallback(function () {\n      var nPlacement = getMaybeFuncValue(calendarPlacement);\n      setPlacement(nPlacement);\n      setOpen(true);\n      customOnFocus();\n    }, [calendarPlacement, customOnFocus]);\n\n    var handleBlur = function handleBlur(force) {\n      if (open && !force) {\n        // allow interactinos on Calendar without closing it\n        return;\n      }\n\n      setOpen(false);\n      customOnBlur();\n    };\n\n    return [hiddenInputRef, overlayContainerRef, controlInputRef, open, placement, handleFocus, handleBlur];\n  };\n\n  var Element = typeof Element === 'undefined' ? function () {} : Element;\n  var propRef = PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].func, PropTypes__default[\"default\"].shape({\n    current: PropTypes__default[\"default\"].instanceOf(Element)\n  }) // PropTypes.shape({ current: PropTypes.any })\n  ]);\n  var propElemOrString = PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].string, PropTypes__default[\"default\"].object]);\n  var globalProps = {\n    value: PropTypes__default[\"default\"].string,\n    defaultValue: PropTypes__default[\"default\"].string,\n    id: PropTypes__default[\"default\"].string,\n    name: PropTypes__default[\"default\"].string,\n    dateFormat: PropTypes__default[\"default\"].string,\n    // 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY/MM/DD', 'DD-MM-YYYY'\n    minDate: PropTypes__default[\"default\"].string,\n    maxDate: PropTypes__default[\"default\"].string,\n    clearButtonElement: propElemOrString,\n    showClearButton: PropTypes__default[\"default\"].bool\n  };\n\n  var defaultDateFormat = function defaultDateFormat() {\n    var language = typeof window !== 'undefined' && window.navigator ? (window.navigator.userLanguage || window.navigator.language || '').toLowerCase() : '';\n    var dateFormat = !language || language === 'en-us' ? 'MM/DD/YYYY' : 'DD/MM/YYYY';\n    return dateFormat;\n  };\n\n  var globalDefaultProps = {\n    clearButtonElement: '×',\n    dateFormat: defaultDateFormat(),\n    showClearButton: true\n  };\n  var eventProps = {\n    onInvalid: PropTypes__default[\"default\"].func,\n    onChange: PropTypes__default[\"default\"].func,\n    onClear: PropTypes__default[\"default\"].func,\n    onBlur: PropTypes__default[\"default\"].func,\n    onFocus: PropTypes__default[\"default\"].func\n  }; //import React  from 'react'\n\n  var inputGroupProps = {\n    size: PropTypes__default[\"default\"].string,\n    valid: PropTypes__default[\"default\"].bool,\n    invalid: PropTypes__default[\"default\"].bool,\n    customInputGroup: PropTypes__default[\"default\"].object\n  }; //import React  from 'react'\n\n  var inputProps = {\n    autoComplete: PropTypes__default[\"default\"].string,\n    autoFocus: PropTypes__default[\"default\"].bool,\n    disabled: PropTypes__default[\"default\"].bool,\n    noValidate: PropTypes__default[\"default\"].bool,\n    placeholder: PropTypes__default[\"default\"].string,\n    required: PropTypes__default[\"default\"].bool,\n    className: PropTypes__default[\"default\"].string,\n    style: PropTypes__default[\"default\"].object,\n    inputRef: propRef,\n    customControl: PropTypes__default[\"default\"].object,\n    children: PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].arrayOf(PropTypes__default[\"default\"].node), PropTypes__default[\"default\"].node])\n  };\n  var inputDefaultrops = {\n    autoFocus: false,\n    disabled: false,\n    autoComplete: 'on',\n\n    /*style: {\n      width: '100%'\n    },*/\n    noValidate: false\n  };\n  var calendarProps = {\n    dayLabels: PropTypes__default[\"default\"].array,\n    monthLabels: PropTypes__default[\"default\"].array,\n    weekStartsOn: PropTypes__default[\"default\"].number,\n    showWeeks: PropTypes__default[\"default\"].bool,\n    previousButtonElement: propElemOrString,\n    nextButtonElement: propElemOrString,\n    showTodayButton: PropTypes__default[\"default\"].bool,\n    todayButtonLabel: PropTypes__default[\"default\"].string,\n    roundedCorners: PropTypes__default[\"default\"].bool,\n    // better borderRadius\n    cellPadding: PropTypes__default[\"default\"].string,\n    calendarPlacement: PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].string, PropTypes__default[\"default\"].func]),\n    calendarContainer: PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].string, propRef])\n  };\n  var calendarDefaultProps = {\n    cellPadding: '5px',\n    dayLabels: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    monthLabels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    previousButtonElement: '<',\n    nextButtonElement: '>',\n    calendarPlacement: 'bottom',\n    showTodayButton: false,\n    todayButtonLabel: 'Today',\n    showWeeks: false,\n    roundedCorners: false\n  };\n\n  var datePickerProps = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, globalProps), eventProps), inputGroupProps), inputProps), calendarProps);\n\n  var datePickerDefaulProps = _objectSpread2(_objectSpread2(_objectSpread2({}, globalDefaultProps), inputDefaultrops), calendarDefaultProps);\n\n  function _DatePicker(props, ref) {\n    var value = props.value,\n        defaultValue = props.defaultValue,\n        dateFormat = props.dateFormat,\n        weekStartsOn = props.weekStartsOn,\n        minDate = props.minDate,\n        maxDate = props.maxDate,\n        onChange = props.onChange,\n        onFocus = props.onFocus,\n        onBlur = props.onBlur,\n        onClear = props.onClear,\n        onInvalid = props.onInvalid,\n        id = props.id,\n        name = props.name,\n        required = props.required,\n        placeholder = props.placeholder,\n        inputRef = props.inputRef,\n        noValidate = props.noValidate,\n        valid = props.valid,\n        invalid = props.invalid,\n        customInputGroup = props.customInputGroup,\n        style = props.style,\n        className = props.className,\n        autoComplete = props.autoComplete,\n        autoFocus = props.autoFocus,\n        disabled = props.disabled,\n        size = props.size,\n        customControl = props.customControl,\n        showClearButton = props.showClearButton,\n        clearButtonElement = props.clearButtonElement,\n        previousButtonElement = props.previousButtonElement,\n        nextButtonElement = props.nextButtonElement,\n        cellPadding = props.cellPadding,\n        roundedCorners = props.roundedCorners,\n        dayLabels = props.dayLabels,\n        monthLabels = props.monthLabels,\n        calendarPlacement = props.calendarPlacement,\n        calendarContainer = props.calendarContainer,\n        showWeeks = props.showWeeks,\n        showTodayButton = props.showTodayButton,\n        todayButtonLabel = props.todayButtonLabel,\n        children = props.children;\n    var propError = useCheckProps(value, defaultValue);\n\n    if (propError != undefined) {\n      throw new Error(propError);\n    }\n\n    var _useCalendarProps = useCalendarProps(calendarPlacement, inputRef, autoFocus, onBlur, onFocus),\n        _useCalendarProps2 = _slicedToArray(_useCalendarProps, 7),\n        hiddenInputRef = _useCalendarProps2[0],\n        overlayContainerRef = _useCalendarProps2[1],\n        controlInputRef = _useCalendarProps2[2],\n        open = _useCalendarProps2[3],\n        placement = _useCalendarProps2[4],\n        handleFocus = _useCalendarProps2[5],\n        handleBlur = _useCalendarProps2[6];\n\n    var _useInputValues = useInputValues(controlInputRef, value, defaultValue, minDate, maxDate, dateFormat, onClear, onChange),\n        _useInputValues2 = _slicedToArray(_useInputValues, 8),\n        innerValue = _useInputValues2[0],\n        inputValue = _useInputValues2[1],\n        displayDate = _useInputValues2[2],\n        selectedDate = _useInputValues2[3],\n        handleClear = _useInputValues2[4],\n        handleInputChange = _useInputValues2[5],\n        handleChangeMonth = _useInputValues2[6],\n        handleChangeDate = _useInputValues2[7];\n\n    var _useInputIds = useInputIds(id, name, customControl),\n        _useInputIds2 = _slicedToArray(_useInputIds, 3),\n        groupInputId = _useInputIds2[0],\n        hiddenInputId = _useInputIds2[1],\n        controlInputId = _useInputIds2[2];\n\n    React.useImperativeHandle(ref, function () {\n      return {\n        getValue: function getValue() {\n          return selectedDate ? selectedDate.toISOString() : null;\n        },\n        getFormattedValue: function getFormattedValue() {\n          return displayDate ? inputValue : null;\n        },\n        getNode: function getNode() {\n          return controlInputRef === null || controlInputRef === void 0 ? void 0 : controlInputRef.current;\n        }\n      };\n    });\n    var fixedDayLabels = useFixedDayLabels(dayLabels, weekStartsOn);\n\n    var handleChangeDateAndBlur = function handleChangeDateAndBlur(nSelectedDate) {\n      handleChangeDate(nSelectedDate);\n      handleBlur(true);\n    };\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(InputGroup, {\n      customInputGroup: customInputGroup,\n      size: size,\n      inputId: groupInputId\n    }, /*#__PURE__*/React__default[\"default\"].createElement(InputControlInput, {\n      controlId: controlInputId,\n      customControl: customControl,\n      value: inputValue || '',\n      required: required,\n      placeholder: placeholder || '',\n      inputRef: controlInputRef,\n      disabled: disabled,\n      className: className,\n      style: style,\n      autoFocus: autoFocus,\n      autoComplete: autoComplete,\n      onInvalid: onInvalid,\n      noValidate: noValidate,\n      valid: valid,\n      invalid: invalid,\n      onFocus: function onFocus() {\n        return handleFocus();\n      },\n      onBlur: function onBlur(e) {\n        var _e$data;\n\n        return handleBlur((e === null || e === void 0 ? void 0 : (_e$data = e.data) === null || _e$data === void 0 ? void 0 : _e$data.rdp_close_calendar) || false);\n      },\n      onChange: function onChange() {\n        return handleInputChange();\n      }\n    }), /*#__PURE__*/React__default[\"default\"].createElement(Calendar, {\n      placement: placement,\n      open: open,\n      container: calendarContainer || overlayContainerRef.current,\n      target: controlInputId,\n      previousButtonElement: previousButtonElement,\n      nextButtonElement: nextButtonElement,\n      displayDate: displayDate,\n      minDate: minDate,\n      maxDate: maxDate,\n      onChangeMonth: function onChangeMonth(newDisplayDate) {\n        return handleChangeMonth(newDisplayDate);\n      },\n      monthLabels: monthLabels,\n      cellPadding: cellPadding,\n      selectedDate: selectedDate,\n      onChange: function onChange(newSelectedDate) {\n        return handleChangeDateAndBlur(newSelectedDate);\n      },\n      dayLabels: fixedDayLabels,\n      weekStartsOn: weekStartsOn,\n      showTodayButton: showTodayButton,\n      todayButtonLabel: todayButtonLabel,\n      roundedCorners: roundedCorners,\n      showWeeks: showWeeks\n    }), /*#__PURE__*/React__default[\"default\"].createElement(InputOverlay, {\n      overlayContainerRef: overlayContainerRef\n    }), /*#__PURE__*/React__default[\"default\"].createElement(InputHidden, {\n      inputId: hiddenInputId,\n      name: name,\n      value: innerValue || '',\n      formattedValue: innerValue ? inputValue : '',\n      hiddenInputRef: hiddenInputRef\n    }), showClearButton && !customControl ? /*#__PURE__*/React__default[\"default\"].createElement(InputClearButton, {\n      inputValue: inputValue,\n      disabled: disabled,\n      clearButtonElement: clearButtonElement,\n      onClick: function onClick() {\n        return handleClear();\n      }\n    }) : null, children);\n  }\n\n  var DatePicker = /*#__PURE__*/React.forwardRef(_DatePicker);\n  DatePicker.propTypes = datePickerProps;\n  DatePicker.defaultProps = datePickerDefaulProps;\n  exports.DatePicker = DatePicker;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}