{"ast":null,"code":"import * as React from 'react';\nimport React__default, { createContext, useContext, useState, forwardRef, useEffect, useRef } from 'react';\nimport enUS from 'date-fns/locale/en-US';\nimport format from 'date-fns/format';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport isSameYear from 'date-fns/isSameYear';\nimport setMonth from 'date-fns/setMonth';\nimport setYear from 'date-fns/setYear';\nimport startOfYear from 'date-fns/startOfYear';\nimport addMonths from 'date-fns/addMonths';\nimport isBefore from 'date-fns/isBefore';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport differenceInCalendarMonths from 'date-fns/differenceInCalendarMonths';\nimport addDays from 'date-fns/addDays';\nimport _startOfWeek from 'date-fns/startOfWeek';\nimport getUnixTime from 'date-fns/getUnixTime';\nimport isSameDay from 'date-fns/isSameDay';\nimport differenceInCalendarDays from 'date-fns/differenceInCalendarDays';\nimport isAfter from 'date-fns/isAfter';\nimport isDate from 'date-fns/isDate';\nimport addWeeks from 'date-fns/addWeeks';\nimport addYears from 'date-fns/addYears';\nimport _endOfWeek from 'date-fns/endOfWeek';\nimport max from 'date-fns/max';\nimport min from 'date-fns/min';\nimport getWeeksInMonth from 'date-fns/getWeeksInMonth';\nimport getWeek from 'date-fns/getWeek';\nimport parse from 'date-fns/parse';\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n/** Returns true when the props are of type {@link DayPickerMultipleProps}. */\n\n\nfunction isDayPickerMultiple(props) {\n  return props.mode === 'multiple';\n}\n/** Returns true when the props are of type {@link DayPickerRangeProps}. */\n\n\nfunction isDayPickerRange(props) {\n  return props.mode === 'range';\n}\n/** Returns true when the props are of type {@link DayPickerSingleProps}. */\n\n\nfunction isDayPickerSingle(props) {\n  return props.mode === 'single';\n}\n/**\n * The name of the default CSS classes.\n */\n\n\nvar defaultClassNames = {\n  root: 'rdp',\n  multiple_months: 'rdp-multiple_months',\n  with_weeknumber: 'rdp-with_weeknumber',\n  vhidden: 'rdp-vhidden',\n  button_reset: 'rdp-button_reset',\n  button: 'rdp-button',\n  caption: 'rdp-caption',\n  caption_start: 'rdp-caption_start',\n  caption_end: 'rdp-caption_end',\n  caption_between: 'rdp-caption_between',\n  caption_label: 'rdp-caption_label',\n  caption_dropdowns: 'rdp-caption_dropdowns',\n  dropdown: 'rdp-dropdown',\n  dropdown_month: 'rdp-dropdown_month',\n  dropdown_year: 'rdp-dropdown_year',\n  dropdown_icon: 'rdp-dropdown_icon',\n  months: 'rdp-months',\n  month: 'rdp-month',\n  table: 'rdp-table',\n  tbody: 'rdp-tbody',\n  tfoot: 'rdp-tfoot',\n  head: 'rdp-head',\n  head_row: 'rdp-head_row',\n  head_cell: 'rdp-head_cell',\n  nav: 'rdp-nav',\n  nav_button: 'rdp-nav_button',\n  nav_button_previous: 'rdp-nav_button_previous',\n  nav_button_next: 'rdp-nav_button_next',\n  nav_icon: 'rdp-nav_icon',\n  row: 'rdp-row',\n  weeknumber: 'rdp-weeknumber',\n  cell: 'rdp-cell',\n  day: 'rdp-day',\n  day_today: 'rdp-day_today',\n  day_outside: 'rdp-day_outside',\n  day_selected: 'rdp-day_selected',\n  day_disabled: 'rdp-day_disabled',\n  day_hidden: 'rdp-day_hidden',\n  day_range_start: 'rdp-day_range_start',\n  day_range_end: 'rdp-day_range_end',\n  day_range_middle: 'rdp-day_range_middle'\n};\n/**\n * The default formatter for the caption.\n */\n\nfunction formatCaption(month, options) {\n  return format(month, 'LLLL y', options);\n}\n/**\n * The default formatter for the Day button.\n */\n\n\nfunction formatDay(day, options) {\n  return format(day, 'd', options);\n}\n/**\n * The default formatter for the Month caption.\n */\n\n\nfunction formatMonthCaption(month, options) {\n  return format(month, 'LLLL', options);\n}\n/**\n * The default formatter for the week number.\n */\n\n\nfunction formatWeekNumber(weekNumber) {\n  return \"\".concat(weekNumber);\n}\n/**\n * The default formatter for the name of the weekday.\n */\n\n\nfunction formatWeekdayName(weekday, options) {\n  return format(weekday, 'cccccc', options);\n}\n/**\n * The default formatter for the Year caption.\n */\n\n\nfunction formatYearCaption(year, options) {\n  return format(year, 'yyyy', options);\n}\n\nvar formatters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  formatCaption: formatCaption,\n  formatDay: formatDay,\n  formatMonthCaption: formatMonthCaption,\n  formatWeekNumber: formatWeekNumber,\n  formatWeekdayName: formatWeekdayName,\n  formatYearCaption: formatYearCaption\n});\n/**\n * The default ARIA label for the day button.\n */\n\nvar labelDay = function labelDay(day, activeModifiers, options) {\n  return format(day, 'do MMMM (EEEE)', options);\n};\n/**\n * The default ARIA label for the WeekNumber element.\n */\n\n\nvar labelMonthDropdown = function labelMonthDropdown() {\n  return 'Month: ';\n};\n/**\n * The default ARIA label for next month button in navigation\n */\n\n\nvar labelNext = function labelNext() {\n  return 'Go to next month';\n};\n/**\n * The default ARIA label for previous month button in navigation\n */\n\n\nvar labelPrevious = function labelPrevious() {\n  return 'Go to previous month';\n};\n/**\n * The default ARIA label for the Weekday element.\n */\n\n\nvar labelWeekday = function labelWeekday(day, options) {\n  return format(day, 'cccc', options);\n};\n/**\n * The default ARIA label for the WeekNumber element.\n */\n\n\nvar labelWeekNumber = function labelWeekNumber(n) {\n  return \"Week n. \".concat(n);\n};\n/**\n * The default ARIA label for the WeekNumber element.\n */\n\n\nvar labelYearDropdown = function labelYearDropdown() {\n  return 'Year: ';\n};\n\nvar labels = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  labelDay: labelDay,\n  labelMonthDropdown: labelMonthDropdown,\n  labelNext: labelNext,\n  labelPrevious: labelPrevious,\n  labelWeekday: labelWeekday,\n  labelWeekNumber: labelWeekNumber,\n  labelYearDropdown: labelYearDropdown\n});\n/**\n * Returns the default values to use in the DayPickerContext, in case they are\n * not passed down with the DayPicker initial props.\n */\n\nfunction getDefaultContextValue() {\n  var captionLayout = 'buttons';\n  var classNames = defaultClassNames;\n  var locale = enUS;\n  var modifiersClassNames = {};\n  var modifiers = {};\n  var numberOfMonths = 1;\n  var styles = {};\n  var today = new Date();\n  return {\n    captionLayout: captionLayout,\n    classNames: classNames,\n    formatters: formatters,\n    labels: labels,\n    locale: locale,\n    modifiersClassNames: modifiersClassNames,\n    modifiers: modifiers,\n    numberOfMonths: numberOfMonths,\n    styles: styles,\n    today: today,\n    mode: 'default'\n  };\n}\n/** Return the `fromDate` and `toDate` prop values values parsing the DayPicker props. */\n\n\nfunction parseFromToProps(props) {\n  var fromYear = props.fromYear,\n      toYear = props.toYear,\n      fromMonth = props.fromMonth,\n      toMonth = props.toMonth;\n  var fromDate = props.fromDate,\n      toDate = props.toDate;\n\n  if (fromMonth) {\n    fromDate = startOfMonth(fromMonth);\n  } else if (fromYear) {\n    fromDate = new Date(fromYear, 0, 1);\n  }\n\n  if (toMonth) {\n    toDate = endOfMonth(toMonth);\n  } else if (toYear) {\n    toDate = new Date(toYear, 11, 31);\n  }\n\n  return {\n    fromDate: fromDate ? startOfDay(fromDate) : undefined,\n    toDate: toDate ? startOfDay(toDate) : undefined\n  };\n}\n/**\n * The DayPicker context shares the props passed to DayPicker within internal\n * and custom components. It is used to set the default values and perform\n * one-time calculations required to render the days.\n *\n * Access to this context from the {@link useDayPicker} hook.\n */\n\n\nvar DayPickerContext = createContext(undefined);\n/**\n * The provider for the {@link DayPickerContext}, assigning the defaults from the\n * initial DayPicker props.\n */\n\nfunction DayPickerProvider(props) {\n  var _a, _b, _c, _d;\n\n  var initialProps = props.initialProps;\n  var defaults = getDefaultContextValue();\n\n  var _e = parseFromToProps(initialProps),\n      fromDate = _e.fromDate,\n      toDate = _e.toDate;\n\n  var captionLayout = (_a = initialProps.captionLayout) !== null && _a !== void 0 ? _a : defaults.captionLayout;\n\n  if (captionLayout !== 'buttons' && (!fromDate || !toDate)) {\n    captionLayout = 'buttons';\n  }\n\n  var onSelect;\n\n  if (isDayPickerSingle(initialProps) || isDayPickerMultiple(initialProps) || isDayPickerRange(initialProps)) {\n    onSelect = initialProps.onSelect;\n  }\n\n  var value = {\n    captionLayout: captionLayout,\n    className: initialProps.className,\n    classNames: _assign(_assign({}, defaults.classNames), initialProps.classNames),\n    components: _assign(_assign({}, defaults.components), initialProps.components),\n    defaultMonth: initialProps.defaultMonth,\n    dir: initialProps.dir,\n    disabled: initialProps.disabled,\n    disableNavigation: initialProps.disableNavigation,\n    fixedWeeks: initialProps.fixedWeeks,\n    footer: initialProps.footer,\n    formatters: _assign(_assign({}, defaults.formatters), initialProps.formatters),\n    fromDate: fromDate,\n    hidden: initialProps.hidden,\n    hideHead: initialProps.hideHead,\n    initialFocus: initialProps.initialFocus,\n    labels: _assign(_assign({}, defaults.labels), initialProps.labels),\n    locale: (_b = initialProps.locale) !== null && _b !== void 0 ? _b : defaults.locale,\n    mode: initialProps.mode || 'default',\n    modifiers: _assign(_assign({}, defaults.modifiers), initialProps.modifiers),\n    modifiersClassNames: _assign(_assign({}, defaults.modifiersClassNames), initialProps.modifiersClassNames),\n    modifiersStyles: initialProps.modifiersStyles,\n    month: initialProps.month,\n    numberOfMonths: (_c = initialProps.numberOfMonths) !== null && _c !== void 0 ? _c : defaults.numberOfMonths,\n    onDayBlur: initialProps.onDayBlur,\n    onDayClick: initialProps.onDayClick,\n    onDayFocus: initialProps.onDayFocus,\n    onDayKeyDown: initialProps.onDayKeyDown,\n    onDayKeyPress: initialProps.onDayKeyPress,\n    onDayKeyUp: initialProps.onDayKeyUp,\n    onDayMouseEnter: initialProps.onDayMouseEnter,\n    onDayMouseLeave: initialProps.onDayMouseLeave,\n    onDayTouchCancel: initialProps.onDayTouchCancel,\n    onDayTouchEnd: initialProps.onDayTouchEnd,\n    onDayTouchMove: initialProps.onDayTouchMove,\n    onDayTouchStart: initialProps.onDayTouchStart,\n    onMonthChange: initialProps.onMonthChange,\n    onNextClick: initialProps.onNextClick,\n    onPrevClick: initialProps.onPrevClick,\n    onSelect: onSelect,\n    onWeekNumberClick: initialProps.onWeekNumberClick,\n    pagedNavigation: initialProps.pagedNavigation,\n    reverseMonths: initialProps.reverseMonths,\n    selected: initialProps.selected,\n    showOutsideDays: initialProps.showOutsideDays,\n    showWeekNumber: initialProps.showWeekNumber,\n    style: initialProps.style,\n    styles: _assign(_assign({}, defaults.styles), initialProps.styles),\n    toDate: toDate,\n    today: (_d = initialProps.today) !== null && _d !== void 0 ? _d : defaults.today,\n    weekStartsOn: initialProps.weekStartsOn\n  };\n  return React__default.createElement(DayPickerContext.Provider, {\n    value: value\n  }, props.children);\n}\n/**\n * Hook to access the {@link DayPickerContextValue}.\n *\n * Use the DayPicker context to access to the props passed to DayPicker inside\n * internal or custom components.\n */\n\n\nfunction useDayPicker() {\n  var context = useContext(DayPickerContext);\n\n  if (!context) {\n    throw new Error(\"useDayPicker must be used within a DayPickerProvider.\");\n  }\n\n  return context;\n}\n/** Render the caption for the displayed month. This component is used when `captionLayout=\"buttons\"`. */\n\n\nfunction CaptionLabel(props) {\n  var _a = useDayPicker(),\n      locale = _a.locale,\n      classNames = _a.classNames,\n      styles = _a.styles,\n      formatCaption = _a.formatters.formatCaption;\n\n  return React__default.createElement(\"h2\", {\n    className: classNames.caption_label,\n    style: styles.caption_label,\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    id: props.id\n  }, formatCaption(props.displayMonth, {\n    locale: locale\n  }));\n}\n/**\n * Render the icon in the styled drop-down.\n */\n\n\nfunction IconDropdown(props) {\n  return React__default.createElement(\"svg\", _assign({\n    width: \"8px\",\n    height: \"8px\",\n    viewBox: \"0 0 120 120\",\n    \"data-testid\": \"iconDropdown\"\n  }, props), React__default.createElement(\"path\", {\n    d: \"M4.22182541,48.2218254 C8.44222828,44.0014225 15.2388494,43.9273804 19.5496459,47.9996989 L19.7781746,48.2218254 L60,88.443 L100.221825,48.2218254 C104.442228,44.0014225 111.238849,43.9273804 115.549646,47.9996989 L115.778175,48.2218254 C119.998577,52.4422283 120.07262,59.2388494 116.000301,63.5496459 L115.778175,63.7781746 L67.7781746,111.778175 C63.5577717,115.998577 56.7611506,116.07262 52.4503541,112.000301 L52.2218254,111.778175 L4.22182541,63.7781746 C-0.0739418023,59.4824074 -0.0739418023,52.5175926 4.22182541,48.2218254 Z\",\n    fill: \"currentColor\",\n    fillRule: \"nonzero\"\n  }));\n}\n/**\n * Render a styled select component – displaying a caption and a custom\n * drop-down icon.\n */\n\n\nfunction Dropdown(props) {\n  var _a, _b;\n\n  var onChange = props.onChange,\n      value = props.value,\n      children = props.children,\n      caption = props.caption,\n      className = props.className,\n      style = props.style;\n  var dayPicker = useDayPicker();\n  var IconDropdownComponent = (_b = (_a = dayPicker.components) === null || _a === void 0 ? void 0 : _a.IconDropdown) !== null && _b !== void 0 ? _b : IconDropdown;\n  return React__default.createElement(\"div\", {\n    className: className,\n    style: style\n  }, React__default.createElement(\"span\", {\n    className: dayPicker.classNames.vhidden\n  }, props['aria-label']), React__default.createElement(\"select\", {\n    name: props.name,\n    \"aria-label\": props['aria-label'],\n    className: dayPicker.classNames.dropdown,\n    style: dayPicker.styles.dropdown,\n    value: value,\n    onChange: onChange\n  }, children), React__default.createElement(\"div\", {\n    className: dayPicker.classNames.caption_label,\n    style: dayPicker.styles.caption_label,\n    \"aria-hidden\": \"true\"\n  }, caption, React__default.createElement(IconDropdownComponent, {\n    className: dayPicker.classNames.dropdown_icon,\n    style: dayPicker.styles.dropdown_icon\n  })));\n}\n/** Render the dropdown to navigate between months. */\n\n\nfunction MonthsDropdown(props) {\n  var _a;\n\n  var _b = useDayPicker(),\n      fromDate = _b.fromDate,\n      toDate = _b.toDate,\n      styles = _b.styles,\n      locale = _b.locale,\n      formatMonthCaption = _b.formatters.formatMonthCaption,\n      classNames = _b.classNames,\n      components = _b.components,\n      labelMonthDropdown = _b.labels.labelMonthDropdown; // Dropdown should appear only when both from/toDate is set\n\n\n  if (!fromDate) return React__default.createElement(React__default.Fragment, null);\n  if (!toDate) return React__default.createElement(React__default.Fragment, null);\n  var dropdownMonths = [];\n\n  if (isSameYear(fromDate, toDate)) {\n    // only display the months included in the range\n    var date = startOfMonth(fromDate);\n\n    for (var month = fromDate.getMonth(); month <= toDate.getMonth(); month++) {\n      dropdownMonths.push(setMonth(date, month));\n    }\n  } else {\n    // display all the 12 months\n    var date = startOfMonth(new Date()); // Any date should be OK, as we just need the year\n\n    for (var month = 0; month <= 11; month++) {\n      dropdownMonths.push(setMonth(date, month));\n    }\n  }\n\n  var handleChange = function handleChange(e) {\n    var selectedMonth = Number(e.target.value);\n    var newMonth = setMonth(startOfMonth(props.displayMonth), selectedMonth);\n    props.onChange(newMonth);\n  };\n\n  var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown;\n  return React__default.createElement(DropdownComponent, {\n    name: \"months\",\n    \"aria-label\": labelMonthDropdown(),\n    className: classNames.dropdown_month,\n    style: styles.dropdown_month,\n    onChange: handleChange,\n    value: props.displayMonth.getMonth(),\n    caption: formatMonthCaption(props.displayMonth, {\n      locale: locale\n    })\n  }, dropdownMonths.map(function (m) {\n    return React__default.createElement(\"option\", {\n      key: m.getMonth(),\n      value: m.getMonth()\n    }, formatMonthCaption(m, {\n      locale: locale\n    }));\n  }));\n}\n/**\n * Render a dropdown to change the year. Take in account the `nav.fromDate` and\n * `toDate` from context.\n */\n\n\nfunction YearsDropdown(props) {\n  var _a;\n\n  var displayMonth = props.displayMonth;\n\n  var _b = useDayPicker(),\n      fromDate = _b.fromDate,\n      toDate = _b.toDate,\n      locale = _b.locale,\n      styles = _b.styles,\n      classNames = _b.classNames,\n      components = _b.components,\n      formatYearCaption = _b.formatters.formatYearCaption,\n      labelYearDropdown = _b.labels.labelYearDropdown;\n\n  var years = []; // Dropdown should appear only when both from/toDate is set\n\n  if (!fromDate) return React__default.createElement(React__default.Fragment, null);\n  if (!toDate) return React__default.createElement(React__default.Fragment, null);\n  var fromYear = fromDate.getFullYear();\n  var toYear = toDate.getFullYear();\n\n  for (var year = fromYear; year <= toYear; year++) {\n    years.push(setYear(startOfYear(new Date()), year));\n  }\n\n  var handleChange = function handleChange(e) {\n    var newMonth = setYear(startOfMonth(displayMonth), Number(e.target.value));\n    props.onChange(newMonth);\n  };\n\n  var DropdownComponent = (_a = components === null || components === void 0 ? void 0 : components.Dropdown) !== null && _a !== void 0 ? _a : Dropdown;\n  return React__default.createElement(DropdownComponent, {\n    name: \"years\",\n    \"aria-label\": labelYearDropdown(),\n    className: classNames.dropdown_year,\n    style: styles.dropdown_year,\n    onChange: handleChange,\n    value: displayMonth.getFullYear(),\n    caption: formatYearCaption(displayMonth, {\n      locale: locale\n    })\n  }, years.map(function (year) {\n    return React__default.createElement(\"option\", {\n      key: year.getFullYear(),\n      value: year.getFullYear()\n    }, formatYearCaption(year, {\n      locale: locale\n    }));\n  }));\n}\n/**\n * Helper hook for using controlled/uncontrolled values from a component props.\n *\n * When the value is not controlled, pass `undefined` as `controlledValue` and\n * use the returned setter to update it.\n *\n * When the value is controlled, pass the controlled value as second\n * argument, which will be always returned as `value`.\n */\n\n\nfunction useControlledValue(defaultValue, controlledValue) {\n  var _a = useState(defaultValue),\n      uncontrolledValue = _a[0],\n      setValue = _a[1];\n\n  var value = controlledValue === undefined ? uncontrolledValue : controlledValue;\n  return [value, setValue];\n}\n/** Return the initial month according to the given options. */\n\n\nfunction getInitialMonth(context) {\n  var month = context.month,\n      defaultMonth = context.defaultMonth,\n      today = context.today;\n  var initialMonth = month || defaultMonth || today || new Date();\n  var toDate = context.toDate,\n      fromDate = context.fromDate,\n      _a = context.numberOfMonths,\n      numberOfMonths = _a === void 0 ? 1 : _a; // Fix the initialMonth if is after the to-date\n\n  if (toDate && differenceInCalendarMonths(toDate, initialMonth) < 0) {\n    var offset = -1 * (numberOfMonths - 1);\n    initialMonth = addMonths(toDate, offset);\n  } // Fix the initialMonth if is before the from-date\n\n\n  if (fromDate && differenceInCalendarMonths(initialMonth, fromDate) < 0) {\n    initialMonth = fromDate;\n  }\n\n  return startOfMonth(initialMonth);\n}\n/** Controls the navigation state. */\n\n\nfunction useNavigationState() {\n  var context = useDayPicker();\n  var initialMonth = getInitialMonth(context);\n\n  var _a = useControlledValue(initialMonth, context.month),\n      month = _a[0],\n      setMonth = _a[1];\n\n  var goToMonth = function goToMonth(date) {\n    var _a;\n\n    if (context.disableNavigation) return;\n    var month = startOfMonth(date);\n    setMonth(month);\n    (_a = context.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(context, month);\n  };\n\n  return [month, goToMonth];\n}\n/**\n * Return the months to display in the component according to the number of\n * months and the from/to date.\n */\n\n\nfunction getDisplayMonths(month, _a) {\n  var reverseMonths = _a.reverseMonths,\n      numberOfMonths = _a.numberOfMonths;\n  var start = startOfMonth(month);\n  var end = startOfMonth(addMonths(start, numberOfMonths));\n  var monthsDiff = differenceInCalendarMonths(end, start);\n  var months = [];\n\n  for (var i = 0; i < monthsDiff; i++) {\n    var nextMonth = addMonths(start, i);\n    months.push(nextMonth);\n  }\n\n  if (reverseMonths) months = months.reverse();\n  return months;\n}\n/**\n * Returns the next month the user can navigate to according to the given\n * options.\n *\n * Please note that the next month is not always the next calendar month:\n *\n * - if after the `toDate` range, is undefined;\n * - if the navigation is paged, is the number of months displayed ahead.\n *\n */\n\n\nfunction getNextMonth(startingMonth, options) {\n  if (options.disableNavigation) {\n    return undefined;\n  }\n\n  var toDate = options.toDate,\n      pagedNavigation = options.pagedNavigation,\n      _a = options.numberOfMonths,\n      numberOfMonths = _a === void 0 ? 1 : _a;\n  var offset = pagedNavigation ? numberOfMonths : 1;\n  var month = startOfMonth(startingMonth);\n\n  if (!toDate) {\n    return addMonths(month, offset);\n  }\n\n  var monthsDiff = differenceInCalendarMonths(toDate, startingMonth);\n\n  if (monthsDiff < numberOfMonths) {\n    return undefined;\n  } // Jump forward as the number of months when paged navigation\n\n\n  return addMonths(month, offset);\n}\n/**\n * Returns the next previous the user can navigate to, according to the given\n * options.\n *\n * Please note that the previous month is not always the previous calendar\n * month:\n *\n * - if before the `fromDate` date, is `undefined`;\n * - if the navigation is paged, is the number of months displayed before.\n *\n */\n\n\nfunction getPreviousMonth(startingMonth, options) {\n  if (options.disableNavigation) {\n    return undefined;\n  }\n\n  var fromDate = options.fromDate,\n      pagedNavigation = options.pagedNavigation,\n      _a = options.numberOfMonths,\n      numberOfMonths = _a === void 0 ? 1 : _a;\n  var offset = pagedNavigation ? numberOfMonths : 1;\n  var month = startOfMonth(startingMonth);\n\n  if (!fromDate) {\n    return addMonths(month, -offset);\n  }\n\n  var monthsDiff = differenceInCalendarMonths(month, fromDate);\n\n  if (monthsDiff <= 0) {\n    return undefined;\n  } // Jump back as the number of months when paged navigation\n\n\n  return addMonths(month, -offset);\n}\n/**\n * The Navigation context shares details and methods to navigate the months in DayPicker.\n * Access this context from the {@link useNavigation} hook.\n */\n\n\nvar NavigationContext = createContext(undefined);\n/** Provides the values for the {@link NavigationContext}. */\n\nfunction NavigationProvider(props) {\n  var dayPicker = useDayPicker();\n\n  var _a = useNavigationState(),\n      currentMonth = _a[0],\n      goToMonth = _a[1];\n\n  var displayMonths = getDisplayMonths(currentMonth, dayPicker);\n  var nextMonth = getNextMonth(currentMonth, dayPicker);\n  var previousMonth = getPreviousMonth(currentMonth, dayPicker);\n\n  var isDateDisplayed = function isDateDisplayed(date) {\n    return displayMonths.some(function (displayMonth) {\n      return isSameMonth(date, displayMonth);\n    });\n  };\n\n  var goToDate = function goToDate(date, refDate) {\n    if (isDateDisplayed(date)) {\n      return;\n    }\n\n    if (refDate && isBefore(date, refDate)) {\n      goToMonth(addMonths(date, 1 + dayPicker.numberOfMonths * -1));\n    } else {\n      goToMonth(date);\n    }\n  };\n\n  var value = {\n    currentMonth: currentMonth,\n    displayMonths: displayMonths,\n    goToMonth: goToMonth,\n    goToDate: goToDate,\n    previousMonth: previousMonth,\n    nextMonth: nextMonth,\n    isDateDisplayed: isDateDisplayed\n  };\n  return React__default.createElement(NavigationContext.Provider, {\n    value: value\n  }, props.children);\n}\n/**\n * Hook to access the {@link NavigationContextValue}. Use this hook to navigate\n * between months or years in DayPicker.\n *\n * This hook is meant to be used inside internal or custom components.\n */\n\n\nfunction useNavigation() {\n  var context = useContext(NavigationContext);\n\n  if (!context) {\n    throw new Error('useNavigation must be used within a NavigationProvider');\n  }\n\n  return context;\n}\n/**\n * Render a caption with the dropdowns to navigate between months and years.\n */\n\n\nfunction CaptionDropdowns(props) {\n  var _a;\n\n  var _b = useDayPicker(),\n      classNames = _b.classNames,\n      styles = _b.styles,\n      components = _b.components;\n\n  var goToMonth = useNavigation().goToMonth;\n\n  var handleMonthChange = function handleMonthChange(newMonth) {\n    goToMonth(newMonth);\n  };\n\n  var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;\n  var captionLabel = React__default.createElement(CaptionLabelComponent, {\n    id: props.id,\n    displayMonth: props.displayMonth\n  });\n  return React__default.createElement(\"div\", {\n    className: classNames.caption_dropdowns,\n    style: styles.caption_dropdowns\n  }, React__default.createElement(\"div\", {\n    className: classNames.vhidden\n  }, captionLabel), React__default.createElement(MonthsDropdown, {\n    onChange: handleMonthChange,\n    displayMonth: props.displayMonth\n  }), React__default.createElement(YearsDropdown, {\n    onChange: handleMonthChange,\n    displayMonth: props.displayMonth\n  }));\n}\n/**\n * Render the \"previous month\" button in the navigation.\n */\n\n\nfunction IconLeft(props) {\n  return React__default.createElement(\"svg\", _assign({\n    width: \"16px\",\n    height: \"16px\",\n    viewBox: \"0 0 120 120\"\n  }, props), React__default.createElement(\"path\", {\n    d: \"M69.490332,3.34314575 C72.6145263,0.218951416 77.6798462,0.218951416 80.8040405,3.34314575 C83.8617626,6.40086786 83.9268205,11.3179931 80.9992143,14.4548388 L80.8040405,14.6568542 L35.461,60 L80.8040405,105.343146 C83.8617626,108.400868 83.9268205,113.317993 80.9992143,116.454839 L80.8040405,116.656854 C77.7463184,119.714576 72.8291931,119.779634 69.6923475,116.852028 L69.490332,116.656854 L18.490332,65.6568542 C15.4326099,62.5991321 15.367552,57.6820069 18.2951583,54.5451612 L18.490332,54.3431458 L69.490332,3.34314575 Z\",\n    fill: \"currentColor\",\n    fillRule: \"nonzero\"\n  }));\n}\n/**\n * Render the \"next month\" button in the navigation.\n */\n\n\nfunction IconRight(props) {\n  return React__default.createElement(\"svg\", _assign({\n    width: \"16px\",\n    height: \"16px\",\n    viewBox: \"0 0 120 120\"\n  }, props), React__default.createElement(\"path\", {\n    d: \"M49.8040405,3.34314575 C46.6798462,0.218951416 41.6145263,0.218951416 38.490332,3.34314575 C35.4326099,6.40086786 35.367552,11.3179931 38.2951583,14.4548388 L38.490332,14.6568542 L83.8333725,60 L38.490332,105.343146 C35.4326099,108.400868 35.367552,113.317993 38.2951583,116.454839 L38.490332,116.656854 C41.5480541,119.714576 46.4651794,119.779634 49.602025,116.852028 L49.8040405,116.656854 L100.804041,65.6568542 C103.861763,62.5991321 103.926821,57.6820069 100.999214,54.5451612 L100.804041,54.3431458 L49.8040405,3.34314575 Z\",\n    fill: \"currentColor\"\n  }));\n}\n/**\n * Render a button HTML element applying the reset class name.\n */\n\n\nvar Button = forwardRef(function (props, ref) {\n  var _a = useDayPicker(),\n      classNames = _a.classNames,\n      styles = _a.styles;\n\n  var classNamesArr = [classNames.button_reset, classNames.button];\n\n  if (props.className) {\n    classNamesArr.push(props.className);\n  }\n\n  var className = classNamesArr.join(' ');\n\n  var style = _assign(_assign({}, styles.button_reset), styles.button);\n\n  if (props.style) {\n    Object.assign(style, props.style);\n  }\n\n  return React__default.createElement(\"button\", _assign({}, props, {\n    ref: ref,\n    type: \"button\",\n    className: className,\n    style: style\n  }));\n});\n/** A component rendering the navigation buttons or the drop-downs. */\n\nfunction Navigation(props) {\n  var _a, _b;\n\n  var _c = useDayPicker(),\n      dir = _c.dir,\n      locale = _c.locale,\n      classNames = _c.classNames,\n      styles = _c.styles,\n      _d = _c.labels,\n      labelPrevious = _d.labelPrevious,\n      labelNext = _d.labelNext,\n      components = _c.components;\n\n  if (!props.nextMonth && !props.previousMonth) {\n    return React__default.createElement(React__default.Fragment, null);\n  }\n\n  var previousLabel = labelPrevious(props.previousMonth, {\n    locale: locale\n  });\n  var previousClassName = [classNames.nav_button, classNames.nav_button_previous].join(' ');\n  var nextLabel = labelNext(props.nextMonth, {\n    locale: locale\n  });\n  var nextClassName = [classNames.nav_button, classNames.nav_button_next].join(' ');\n  var IconRightComponent = (_a = components === null || components === void 0 ? void 0 : components.IconRight) !== null && _a !== void 0 ? _a : IconRight;\n  var IconLeftComponent = (_b = components === null || components === void 0 ? void 0 : components.IconLeft) !== null && _b !== void 0 ? _b : IconLeft;\n  return React__default.createElement(\"div\", {\n    className: classNames.nav,\n    style: styles.nav\n  }, !props.hidePrevious && React__default.createElement(Button, {\n    name: \"previous-month\",\n    \"aria-label\": previousLabel,\n    className: previousClassName,\n    style: styles.nav_button_previous,\n    disabled: !props.previousMonth,\n    onClick: props.onPreviousClick\n  }, dir === 'rtl' ? React__default.createElement(IconRightComponent, {\n    className: classNames.nav_icon,\n    style: styles.nav_icon\n  }) : React__default.createElement(IconLeftComponent, {\n    className: classNames.nav_icon,\n    style: styles.nav_icon\n  })), !props.hideNext && React__default.createElement(Button, {\n    name: \"next-month\",\n    \"aria-label\": nextLabel,\n    className: nextClassName,\n    style: styles.nav_button_next,\n    disabled: !props.nextMonth,\n    onClick: props.onNextClick\n  }, dir === 'rtl' ? React__default.createElement(IconLeftComponent, {\n    className: classNames.nav_icon,\n    style: styles.nav_icon\n  }) : React__default.createElement(IconRightComponent, {\n    className: classNames.nav_icon,\n    style: styles.nav_icon\n  })));\n}\n/**\n * Render a caption with a button-based navigation.\n */\n\n\nfunction CaptionNavigation(props) {\n  var _a;\n\n  var _b;\n\n  var _c = useDayPicker(),\n      numberOfMonths = _c.numberOfMonths,\n      dir = _c.dir,\n      components = _c.components;\n\n  var _d = useNavigation(),\n      previousMonth = _d.previousMonth,\n      nextMonth = _d.nextMonth,\n      goToMonth = _d.goToMonth,\n      displayMonths = _d.displayMonths;\n\n  var displayIndex = displayMonths.findIndex(function (month) {\n    return isSameMonth(props.displayMonth, month);\n  });\n  var isFirst = displayIndex === 0;\n  var isLast = displayIndex === displayMonths.length - 1;\n\n  if (dir === 'rtl') {\n    _a = [isFirst, isLast], isLast = _a[0], isFirst = _a[1];\n  }\n\n  var hideNext = numberOfMonths > 1 && (isFirst || !isLast);\n  var hidePrevious = numberOfMonths > 1 && (isLast || !isFirst);\n\n  var handlePreviousClick = function handlePreviousClick() {\n    if (!previousMonth) return;\n    goToMonth(previousMonth);\n  };\n\n  var handleNextClick = function handleNextClick() {\n    if (!nextMonth) return;\n    goToMonth(nextMonth);\n  };\n\n  var CaptionLabelComponent = (_b = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _b !== void 0 ? _b : CaptionLabel;\n  var captionLabel = React__default.createElement(CaptionLabelComponent, {\n    id: props.id,\n    displayMonth: props.displayMonth\n  });\n  return React__default.createElement(React__default.Fragment, null, captionLabel, React__default.createElement(Navigation, {\n    displayMonth: props.displayMonth,\n    hideNext: hideNext,\n    hidePrevious: hidePrevious,\n    nextMonth: nextMonth,\n    previousMonth: previousMonth,\n    onPreviousClick: handlePreviousClick,\n    onNextClick: handleNextClick\n  }));\n}\n/**\n * Render the caption of a month. The caption has a different layout when\n * setting the {@link DayPickerBase.captionLayout} prop.\n */\n\n\nfunction Caption(props) {\n  var _a;\n\n  var _b = useDayPicker(),\n      classNames = _b.classNames,\n      disableNavigation = _b.disableNavigation,\n      styles = _b.styles,\n      captionLayout = _b.captionLayout,\n      components = _b.components;\n\n  var CaptionLabelComponent = (_a = components === null || components === void 0 ? void 0 : components.CaptionLabel) !== null && _a !== void 0 ? _a : CaptionLabel;\n  var caption;\n\n  if (disableNavigation) {\n    caption = React__default.createElement(CaptionLabelComponent, {\n      id: props.id,\n      displayMonth: props.displayMonth\n    });\n  } else if (captionLayout === 'dropdown') {\n    caption = React__default.createElement(CaptionDropdowns, {\n      displayMonth: props.displayMonth,\n      id: props.id\n    });\n  } else {\n    caption = React__default.createElement(CaptionNavigation, {\n      displayMonth: props.displayMonth,\n      id: props.id\n    });\n  }\n\n  return React__default.createElement(\"div\", {\n    className: classNames.caption,\n    style: styles.caption\n  }, caption);\n}\n/** Render the Footer component (empty as default).*/\n\n\nfunction Footer() {\n  var _a = useDayPicker(),\n      footer = _a.footer,\n      styles = _a.styles,\n      tfoot = _a.classNames.tfoot;\n\n  if (!footer) return React__default.createElement(React__default.Fragment, null);\n  return React__default.createElement(\"tfoot\", {\n    className: tfoot,\n    style: styles.tfoot\n  }, React__default.createElement(\"tr\", null, React__default.createElement(\"td\", {\n    colSpan: 8\n  }, footer)));\n}\n/**\n * Generate a series of 7 days, starting from the week, to use for formatting\n * the weekday names (Monday, Tuesday, etc.).\n */\n\n\nfunction getWeekdays(locale,\n/** The index of the first day of the week (0 - Sunday) */\nweekStartsOn) {\n  var start = _startOfWeek(new Date(), {\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n\n  var days = [];\n\n  for (var i = 0; i < 7; i++) {\n    var day = addDays(start, i);\n    days.push(day);\n  }\n\n  return days;\n}\n/**\n * Render the HeadRow component - i.e. the table head row with the weekday names.\n */\n\n\nfunction HeadRow() {\n  var _a = useDayPicker(),\n      classNames = _a.classNames,\n      styles = _a.styles,\n      showWeekNumber = _a.showWeekNumber,\n      locale = _a.locale,\n      weekStartsOn = _a.weekStartsOn,\n      formatWeekdayName = _a.formatters.formatWeekdayName,\n      labelWeekday = _a.labels.labelWeekday;\n\n  var weekdays = getWeekdays(locale, weekStartsOn);\n  return React__default.createElement(\"tr\", {\n    style: styles.head_row,\n    className: classNames.head_row\n  }, showWeekNumber && React__default.createElement(\"th\", {\n    scope: \"col\",\n    style: styles.head_cell,\n    className: classNames.head_cell\n  }), weekdays.map(function (weekday, i) {\n    return React__default.createElement(\"th\", {\n      key: i,\n      scope: \"col\",\n      className: classNames.head_cell,\n      style: styles.head_cell\n    }, React__default.createElement(\"span\", {\n      \"aria-hidden\": true\n    }, formatWeekdayName(weekday, {\n      locale: locale\n    })), React__default.createElement(\"span\", {\n      className: classNames.vhidden\n    }, labelWeekday(weekday, {\n      locale: locale\n    })));\n  }));\n}\n/** Render the table head. */\n\n\nfunction Head() {\n  var _a;\n\n  var _b = useDayPicker(),\n      classNames = _b.classNames,\n      styles = _b.styles,\n      components = _b.components;\n\n  var HeadRowComponent = (_a = components === null || components === void 0 ? void 0 : components.HeadRow) !== null && _a !== void 0 ? _a : HeadRow;\n  return React__default.createElement(\"thead\", {\n    style: styles.head,\n    className: classNames.head\n  }, React__default.createElement(HeadRowComponent, null));\n}\n/** Render the content of the day cell. */\n\n\nfunction DayContent(props) {\n  var _a = useDayPicker(),\n      locale = _a.locale,\n      formatDay = _a.formatters.formatDay;\n\n  return React__default.createElement(React__default.Fragment, null, formatDay(props.date, {\n    locale: locale\n  }));\n}\n/**\n * The SelectMultiple context shares details about the selected days when in\n * multiple selection mode.\n *\n * Access this context from the {@link useSelectMultiple} hook.\n */\n\n\nvar SelectMultipleContext = createContext(undefined);\n/** Provides the values for the {@link SelectMultipleContext}. */\n\nfunction SelectMultipleProvider(props) {\n  if (!isDayPickerMultiple(props.initialProps)) {\n    var emptyContextValue = {\n      selected: undefined,\n      modifiers: {\n        disabled: []\n      }\n    };\n    return React__default.createElement(SelectMultipleContext.Provider, {\n      value: emptyContextValue\n    }, props.children);\n  }\n\n  return React__default.createElement(SelectMultipleProviderInternal, {\n    initialProps: props.initialProps,\n    children: props.children\n  });\n}\n\nfunction SelectMultipleProviderInternal(_a) {\n  var initialProps = _a.initialProps,\n      children = _a.children;\n  var selected = initialProps.selected,\n      min = initialProps.min,\n      max = initialProps.max;\n\n  var onDayClick = function onDayClick(day, activeModifiers, e) {\n    var _a, _b;\n\n    (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, activeModifiers, e);\n    var isMinSelected = Boolean(activeModifiers.selected && min && (selected === null || selected === void 0 ? void 0 : selected.length) === min);\n\n    if (isMinSelected) {\n      return;\n    }\n\n    var isMaxSelected = Boolean(!activeModifiers.selected && max && (selected === null || selected === void 0 ? void 0 : selected.length) === max);\n\n    if (isMaxSelected) {\n      return;\n    }\n\n    var selectedDays = selected ? __spreadArray([], selected, true) : [];\n\n    if (activeModifiers.selected) {\n      var index = selectedDays.findIndex(function (selectedDay) {\n        return isSameDay(day, selectedDay);\n      });\n      selectedDays.splice(index, 1);\n    } else {\n      selectedDays.push(day);\n    }\n\n    (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, selectedDays, day, activeModifiers, e);\n  };\n\n  var modifiers = {\n    disabled: []\n  };\n\n  if (selected) {\n    modifiers.disabled.push(function (day) {\n      var isMaxSelected = max && selected.length > max - 1;\n      var isSelected = selected.some(function (selectedDay) {\n        return isSameDay(selectedDay, day);\n      });\n      return Boolean(isMaxSelected && !isSelected);\n    });\n  }\n\n  var contextValue = {\n    selected: selected,\n    onDayClick: onDayClick,\n    modifiers: modifiers\n  };\n  return React__default.createElement(SelectMultipleContext.Provider, {\n    value: contextValue\n  }, children);\n}\n/**\n * Hook to access the {@link SelectMultipleContextValue}.\n *\n * This hook is meant to be used inside internal or custom components.\n */\n\n\nfunction useSelectMultiple() {\n  var context = useContext(SelectMultipleContext);\n\n  if (!context) {\n    throw new Error('useSelectMultiple must be used within a SelectMultipleProvider');\n  }\n\n  return context;\n}\n/**\n * Add a day to an existing range.\n *\n * The returned range takes in account the `undefined` values and if the added\n * day is already present in the range.\n */\n\n\nfunction addToRange(day, range) {\n  var _a = range || {},\n      from = _a.from,\n      to = _a.to;\n\n  if (!from) {\n    return {\n      from: day,\n      to: undefined\n    };\n  }\n\n  if (!to && isSameDay(from, day)) {\n    return {\n      from: from,\n      to: day\n    };\n  }\n\n  if (!to && isBefore(day, from)) {\n    return {\n      from: day,\n      to: from\n    };\n  }\n\n  if (!to) {\n    return {\n      from: from,\n      to: day\n    };\n  }\n\n  if (isSameDay(to, day) && isSameDay(from, day)) {\n    return undefined;\n  }\n\n  if (isSameDay(to, day)) {\n    return {\n      from: to,\n      to: undefined\n    };\n  }\n\n  if (isSameDay(from, day)) {\n    return undefined;\n  }\n\n  if (isAfter(from, day)) {\n    return {\n      from: day,\n      to: to\n    };\n  }\n\n  return {\n    from: from,\n    to: day\n  };\n}\n/**\n * The SelectRange context shares details about the selected days when in\n * range selection mode.\n *\n * Access this context from the {@link useSelectRange} hook.\n */\n\n\nvar SelectRangeContext = createContext(undefined);\n/** Provides the values for the {@link SelectRangeProvider}. */\n\nfunction SelectRangeProvider(props) {\n  if (!isDayPickerRange(props.initialProps)) {\n    var emptyContextValue = {\n      selected: undefined,\n      modifiers: {\n        range_start: [],\n        range_end: [],\n        range_middle: [],\n        disabled: []\n      }\n    };\n    return React__default.createElement(SelectRangeContext.Provider, {\n      value: emptyContextValue\n    }, props.children);\n  }\n\n  return React__default.createElement(SelectRangeProviderInternal, {\n    initialProps: props.initialProps,\n    children: props.children\n  });\n}\n\nfunction SelectRangeProviderInternal(_a) {\n  var initialProps = _a.initialProps,\n      children = _a.children;\n  var selected = initialProps.selected;\n\n  var _b = selected || {},\n      selectedFrom = _b.from,\n      selectedTo = _b.to;\n\n  var min = initialProps.min;\n  var max = initialProps.max;\n\n  var onDayClick = function onDayClick(day, activeModifiers, e) {\n    var _a, _b;\n\n    (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, activeModifiers, e);\n    var range = addToRange(day, selected);\n\n    if ((min || max) && selected && (range === null || range === void 0 ? void 0 : range.to) && range.from && range.from !== range.to) {\n      var diff = Math.abs(differenceInCalendarDays(range === null || range === void 0 ? void 0 : range.to, range === null || range === void 0 ? void 0 : range.from));\n\n      if (min && diff < min || max && diff >= max) {\n        return;\n      }\n    }\n\n    (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, range, day, activeModifiers, e);\n  };\n\n  var modifiers = {\n    range_start: [],\n    range_end: [],\n    range_middle: [],\n    disabled: []\n  };\n\n  if (selectedFrom) {\n    modifiers.range_start = [selectedFrom];\n\n    if (!selectedTo) {\n      modifiers.range_end = [selectedFrom];\n    } else {\n      modifiers.range_end = [selectedTo];\n      modifiers.range_middle = [{\n        after: selectedFrom,\n        before: selectedTo\n      }];\n    }\n  }\n\n  if (min && selectedFrom && selectedTo) {\n    modifiers.disabled.push(function (date) {\n      return isBefore(date, selectedFrom) && differenceInCalendarDays(selectedFrom, date) < min || isAfter(date, selectedTo) && differenceInCalendarDays(date, selectedFrom) < min;\n    });\n  }\n\n  if (max && selectedFrom && selectedTo) {\n    modifiers.disabled.push(function (date) {\n      return isBefore(date, selectedFrom) && differenceInCalendarDays(selectedTo, date) >= max || isAfter(date, selectedTo) && differenceInCalendarDays(date, selectedFrom) >= max;\n    });\n  }\n\n  return React__default.createElement(SelectRangeContext.Provider, {\n    value: {\n      selected: selected,\n      onDayClick: onDayClick,\n      modifiers: modifiers\n    }\n  }, children);\n}\n/**\n * Hook to access the {@link SelectRangeContextValue}.\n *\n * This hook is meant to be used inside internal or custom components.\n */\n\n\nfunction useSelectRange() {\n  var context = useContext(SelectRangeContext);\n\n  if (!context) {\n    throw new Error('useSelectRange must be used within a SelectRangeProvider');\n  }\n\n  return context;\n}\n/** Normalize to array a matcher input. */\n\n\nfunction matcherToArray(matcher) {\n  if (Array.isArray(matcher)) {\n    return matcher;\n  } else if (matcher !== undefined) {\n    return [matcher];\n  } else {\n    return [];\n  }\n}\n/** Create CustomModifiers from dayModifiers */\n\n\nfunction getCustomModifiers(dayModifiers) {\n  var customModifiers = {};\n  Object.entries(dayModifiers).forEach(function (_a) {\n    var modifier = _a[0],\n        matcher = _a[1];\n    customModifiers[modifier] = matcherToArray(matcher);\n  });\n  return customModifiers;\n}\n/** The name of the modifiers that are used internally by DayPicker. */\n\n\nvar InternalModifier;\n\n(function (InternalModifier) {\n  InternalModifier[\"Outside\"] = \"outside\";\n  /** Name of the modifier applied to the disabled days, using the `disabled` prop. */\n\n  InternalModifier[\"Disabled\"] = \"disabled\";\n  /** Name of the modifier applied to the selected days using the `selected` prop). */\n\n  InternalModifier[\"Selected\"] = \"selected\";\n  /** Name of the modifier applied to the hidden days using the `hidden` prop). */\n\n  InternalModifier[\"Hidden\"] = \"hidden\";\n  /** Name of the modifier applied to the day specified using the `today` prop). */\n\n  InternalModifier[\"Today\"] = \"today\";\n  /** The modifier applied to the day starting a selected range, when in range selection mode.  */\n\n  InternalModifier[\"RangeStart\"] = \"range_start\";\n  /** The modifier applied to the day ending a selected range, when in range selection mode.  */\n\n  InternalModifier[\"RangeEnd\"] = \"range_end\";\n  /** The modifier applied to the days between the start and the end of a selected range, when in range selection mode.  */\n\n  InternalModifier[\"RangeMiddle\"] = \"range_middle\";\n})(InternalModifier || (InternalModifier = {}));\n\nvar Selected = InternalModifier.Selected,\n    Disabled = InternalModifier.Disabled,\n    Hidden = InternalModifier.Hidden,\n    Today = InternalModifier.Today,\n    RangeEnd = InternalModifier.RangeEnd,\n    RangeMiddle = InternalModifier.RangeMiddle,\n    RangeStart = InternalModifier.RangeStart,\n    Outside = InternalModifier.Outside;\n/** Return the {@link InternalModifiers} from the DayPicker and select contexts. */\n\nfunction getInternalModifiers(dayPicker, selectMultiple, selectRange) {\n  var _a;\n\n  var internalModifiers = (_a = {}, _a[Selected] = matcherToArray(dayPicker.selected), _a[Disabled] = matcherToArray(dayPicker.disabled), _a[Hidden] = matcherToArray(dayPicker.hidden), _a[Today] = [dayPicker.today], _a[RangeEnd] = [], _a[RangeMiddle] = [], _a[RangeStart] = [], _a[Outside] = [], _a);\n\n  if (dayPicker.fromDate) {\n    internalModifiers[Disabled].push({\n      before: dayPicker.fromDate\n    });\n  }\n\n  if (dayPicker.toDate) {\n    internalModifiers[Disabled].push({\n      after: dayPicker.toDate\n    });\n  }\n\n  if (isDayPickerMultiple(dayPicker)) {\n    internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectMultiple.modifiers[Disabled]);\n  } else if (isDayPickerRange(dayPicker)) {\n    internalModifiers[Disabled] = internalModifiers[Disabled].concat(selectRange.modifiers[Disabled]);\n    internalModifiers[RangeStart] = selectRange.modifiers[RangeStart];\n    internalModifiers[RangeMiddle] = selectRange.modifiers[RangeMiddle];\n    internalModifiers[RangeEnd] = selectRange.modifiers[RangeEnd];\n  }\n\n  return internalModifiers;\n}\n/** The Modifiers context store the modifiers used in DayPicker. To access the value of this context, use {@link useModifiers}. */\n\n\nvar ModifiersContext = createContext(undefined);\n/** Provide the value for the {@link ModifiersContext}. */\n\nfunction ModifiersProvider(props) {\n  var dayPicker = useDayPicker();\n  var selectMultiple = useSelectMultiple();\n  var selectRange = useSelectRange();\n  var internalModifiers = getInternalModifiers(dayPicker, selectMultiple, selectRange);\n  var customModifiers = getCustomModifiers(dayPicker.modifiers);\n\n  var modifiers = _assign(_assign({}, internalModifiers), customModifiers);\n\n  return React__default.createElement(ModifiersContext.Provider, {\n    value: modifiers\n  }, props.children);\n}\n/**\n * Return the modifiers used by DayPicker.\n *\n * This hook is meant to be used inside internal or custom components.\n * Requires to be wrapped into {@link ModifiersProvider}.\n *\n */\n\n\nfunction useModifiers() {\n  var context = useContext(ModifiersContext);\n\n  if (!context) {\n    throw new Error('useModifiers must be used within a ModifiersProvider');\n  }\n\n  return context;\n}\n/** Returns true if `matcher` is of type {@link DateInterval}. */\n\n\nfunction isDateInterval(matcher) {\n  return Boolean(matcher && typeof matcher === 'object' && 'before' in matcher && 'after' in matcher);\n}\n/** Returns true if `value` is a {@link DateRange} type. */\n\n\nfunction isDateRange(value) {\n  return Boolean(value && typeof value === 'object' && 'from' in value);\n}\n/** Returns true if `value` is of type {@link DateAfter}. */\n\n\nfunction isDateAfterType(value) {\n  return Boolean(value && typeof value === 'object' && 'after' in value);\n}\n/** Returns true if `value` is of type {@link DateBefore}. */\n\n\nfunction isDateBeforeType(value) {\n  return Boolean(value && typeof value === 'object' && 'before' in value);\n}\n/** Returns true if `value` is a {@link DayOfWeek} type. */\n\n\nfunction isDayOfWeekType(value) {\n  return Boolean(value && typeof value === 'object' && 'dayOfWeek' in value);\n}\n/** Return `true` whether `date` is inside `range`. */\n\n\nfunction isDateInRange(date, range) {\n  var _a;\n\n  var from = range.from,\n      to = range.to;\n\n  if (!from) {\n    return false;\n  }\n\n  if (!to && isSameDay(from, date)) {\n    return true;\n  }\n\n  if (!to) {\n    return false;\n  }\n\n  var isToBeforeFrom = differenceInCalendarDays(to, from) < 0;\n\n  if (to && isToBeforeFrom) {\n    _a = [to, from], from = _a[0], to = _a[1];\n  }\n\n  return differenceInCalendarDays(date, from) >= 0 && differenceInCalendarDays(to, date) >= 0;\n}\n/** Returns true if `value` is a Date type. */\n\n\nfunction isDateType(value) {\n  return isDate(value);\n}\n/** Returns true if `value` is an array of valid dates. */\n\n\nfunction isArrayOfDates(value) {\n  return Array.isArray(value) && value.every(isDate);\n}\n/**\n * Returns whether a day matches against at least one of the given Matchers.\n *\n * ```\n * const day = new Date(2022, 5, 19);\n * const matcher1: DateRange = {\n *    from: new Date(2021, 12, 21),\n *    to: new Date(2021, 12, 30)\n * }\n * const matcher2: DateRange = {\n *    from: new Date(2022, 5, 1),\n *    to: new Date(2022, 5, 23)\n * }\n *\n * const isMatch(day, [matcher1, matcher2]); // true, since day is in the matcher1 range.\n * ```\n * */\n\n\nfunction isMatch(day, matchers) {\n  return matchers.some(function (matcher) {\n    if (typeof matcher === 'boolean') {\n      return matcher;\n    }\n\n    if (isDateType(matcher)) {\n      return isSameDay(day, matcher);\n    }\n\n    if (isArrayOfDates(matcher)) {\n      return matcher.includes(day);\n    }\n\n    if (isDateRange(matcher)) {\n      return isDateInRange(day, matcher);\n    }\n\n    if (isDayOfWeekType(matcher)) {\n      return matcher.dayOfWeek.includes(day.getDay());\n    }\n\n    if (isDateInterval(matcher)) {\n      var isBefore = differenceInCalendarDays(matcher.before, day) > 0;\n      var isAfter = differenceInCalendarDays(day, matcher.after) > 0;\n      return isBefore && isAfter;\n    }\n\n    if (isDateAfterType(matcher)) {\n      return differenceInCalendarDays(day, matcher.after) > 0;\n    }\n\n    if (isDateBeforeType(matcher)) {\n      return differenceInCalendarDays(matcher.before, day) > 0;\n    }\n\n    if (typeof matcher === 'function') {\n      return matcher(day);\n    }\n\n    return false;\n  });\n}\n/** Return the active modifiers for the given day. */\n\n\nfunction getActiveModifiers(day,\n/** The modifiers to match for the given date. */\nmodifiers,\n/** The month where the day is displayed, to add the \"outside\" modifiers.  */\ndisplayMonth) {\n  var matchedModifiers = Object.keys(modifiers).reduce(function (result, key) {\n    var modifier = modifiers[key];\n\n    if (isMatch(day, modifier)) {\n      result.push(key);\n    }\n\n    return result;\n  }, []);\n  var activeModifiers = {};\n  matchedModifiers.forEach(function (modifier) {\n    return activeModifiers[modifier] = true;\n  });\n\n  if (displayMonth && !isSameMonth(day, displayMonth)) {\n    activeModifiers.outside = true;\n  }\n\n  return activeModifiers;\n}\n/** Returns the day that should be the target of the focus when DayPicker is rendered the first time. */\n\n\nfunction getInitialFocusTarget(displayMonths, modifiers) {\n  var firstDayInMonth = startOfMonth(displayMonths[0]);\n  var lastDayInMonth = endOfMonth(displayMonths[displayMonths.length - 1]); // TODO: cleanup code\n\n  var firstFocusableDay;\n  var today;\n  var date = firstDayInMonth;\n\n  while (date <= lastDayInMonth) {\n    var activeModifiers = getActiveModifiers(date, modifiers);\n    var isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;\n\n    if (!isFocusable) {\n      date = addDays(date, 1);\n      continue;\n    }\n\n    if (activeModifiers.selected) {\n      return date;\n    }\n\n    if (activeModifiers.today && !today) {\n      today = date;\n    }\n\n    if (!firstFocusableDay) {\n      firstFocusableDay = date;\n    }\n\n    date = addDays(date, 1);\n  }\n\n  if (today) {\n    return today;\n  } else {\n    return firstFocusableDay;\n  }\n}\n/** Return the next date to be focused. */\n\n\nfunction getNextFocus(\n/** The day that is focused. */\nfocusedDay, moveBy, direction, options, modifiers) {\n  var weekStartsOn = options.weekStartsOn,\n      fromDate = options.fromDate,\n      toDate = options.toDate,\n      locale = options.locale;\n  var moveFns = {\n    day: addDays,\n    week: addWeeks,\n    month: addMonths,\n    year: addYears,\n    startOfWeek: function startOfWeek(date) {\n      return _startOfWeek(date, {\n        locale: locale,\n        weekStartsOn: weekStartsOn\n      });\n    },\n    endOfWeek: function endOfWeek(date) {\n      return _endOfWeek(date, {\n        locale: locale,\n        weekStartsOn: weekStartsOn\n      });\n    }\n  };\n  var newFocusedDay = moveFns[moveBy](focusedDay, direction === 'after' ? 1 : -1);\n\n  if (direction === 'before' && fromDate) {\n    newFocusedDay = max([fromDate, newFocusedDay]);\n  } else if (direction === 'after' && toDate) {\n    newFocusedDay = min([toDate, newFocusedDay]);\n  }\n\n  if (modifiers) {\n    var activeModifiers = getActiveModifiers(newFocusedDay, modifiers);\n    var isFocusable = !activeModifiers.disabled && !activeModifiers.hidden;\n\n    if (!isFocusable) {\n      return getNextFocus(newFocusedDay, moveBy, direction, options, modifiers);\n    }\n  }\n\n  return newFocusedDay;\n}\n/**\n * The Focus context shares details about the focused day for the keyboard\n *\n * Access this context from the {@link useFocusContext} hook.\n */\n\n\nvar FocusContext = createContext(undefined);\n/** The provider for the {@link FocusContext}. */\n\nfunction FocusProvider(props) {\n  var navigation = useNavigation();\n  var modifiers = useModifiers();\n\n  var _a = useState(),\n      focusedDay = _a[0],\n      setFocusedDay = _a[1];\n\n  var _b = useState(),\n      lastFocused = _b[0],\n      setLastFocused = _b[1];\n\n  var initialFocusTarget = getInitialFocusTarget(navigation.displayMonths, modifiers); // TODO: cleanup and test obscure code below\n\n  var focusTarget = (focusedDay !== null && focusedDay !== void 0 ? focusedDay : lastFocused && navigation.isDateDisplayed(lastFocused)) ? lastFocused : initialFocusTarget;\n\n  var blur = function blur() {\n    setLastFocused(focusedDay);\n    setFocusedDay(undefined);\n  };\n\n  var focus = function focus(date) {\n    setFocusedDay(date);\n  };\n\n  var dayPicker = useDayPicker();\n\n  var moveFocus = function moveFocus(moveBy, direction) {\n    if (!focusedDay) return;\n    var nextFocused = getNextFocus(focusedDay, moveBy, direction, dayPicker, modifiers);\n    if (isSameDay(focusedDay, nextFocused)) return undefined;\n    navigation.goToDate(nextFocused, focusedDay);\n    focus(nextFocused);\n  };\n\n  var value = {\n    focusedDay: focusedDay,\n    focusTarget: focusTarget,\n    blur: blur,\n    focus: focus,\n    focusDayAfter: function focusDayAfter() {\n      return moveFocus('day', 'after');\n    },\n    focusDayBefore: function focusDayBefore() {\n      return moveFocus('day', 'before');\n    },\n    focusWeekAfter: function focusWeekAfter() {\n      return moveFocus('week', 'after');\n    },\n    focusWeekBefore: function focusWeekBefore() {\n      return moveFocus('week', 'before');\n    },\n    focusMonthBefore: function focusMonthBefore() {\n      return moveFocus('month', 'before');\n    },\n    focusMonthAfter: function focusMonthAfter() {\n      return moveFocus('month', 'after');\n    },\n    focusYearBefore: function focusYearBefore() {\n      return moveFocus('year', 'before');\n    },\n    focusYearAfter: function focusYearAfter() {\n      return moveFocus('year', 'after');\n    },\n    focusStartOfWeek: function focusStartOfWeek() {\n      return moveFocus('startOfWeek', 'before');\n    },\n    focusEndOfWeek: function focusEndOfWeek() {\n      return moveFocus('endOfWeek', 'after');\n    }\n  };\n  return React__default.createElement(FocusContext.Provider, {\n    value: value\n  }, props.children);\n}\n/**\n * Hook to access the {@link FocusContextValue}. Use this hook to handle the\n * focus state of the elements.\n *\n * This hook is meant to be used inside internal or custom components.\n */\n\n\nfunction useFocusContext() {\n  var context = useContext(FocusContext);\n\n  if (!context) {\n    throw new Error('useFocusContext must be used within a FocusProvider');\n  }\n\n  return context;\n}\n/**\n * Return the active modifiers for the specified day.\n *\n * This hook is meant to be used inside internal or custom components.\n *\n * @param day\n * @param displayMonth\n */\n\n\nfunction useActiveModifiers(day,\n/**\n * The month where the date is displayed. If not the same as `date`, the day\n * is an \"outside day\".\n */\ndisplayMonth) {\n  var modifiers = useModifiers();\n  var activeModifiers = getActiveModifiers(day, modifiers, displayMonth);\n  return activeModifiers;\n}\n/**\n * The SelectSingle context shares details about the selected days when in\n * single selection mode.\n *\n * Access this context from the {@link useSelectSingle} hook.\n */\n\n\nvar SelectSingleContext = createContext(undefined);\n/** Provides the values for the {@link SelectSingleProvider}. */\n\nfunction SelectSingleProvider(props) {\n  if (!isDayPickerSingle(props.initialProps)) {\n    var emptyContextValue = {\n      selected: undefined\n    };\n    return React__default.createElement(SelectSingleContext.Provider, {\n      value: emptyContextValue\n    }, props.children);\n  }\n\n  return React__default.createElement(SelectSingleProviderInternal, {\n    initialProps: props.initialProps,\n    children: props.children\n  });\n}\n\nfunction SelectSingleProviderInternal(_a) {\n  var initialProps = _a.initialProps,\n      children = _a.children;\n\n  var onDayClick = function onDayClick(day, activeModifiers, e) {\n    var _a, _b, _c;\n\n    (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, activeModifiers, e);\n\n    if (activeModifiers.selected && !initialProps.required) {\n      (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, undefined, day, activeModifiers, e);\n      return;\n    }\n\n    (_c = initialProps.onSelect) === null || _c === void 0 ? void 0 : _c.call(initialProps, day, day, activeModifiers, e);\n  };\n\n  var contextValue = {\n    selected: initialProps.selected,\n    onDayClick: onDayClick\n  };\n  return React__default.createElement(SelectSingleContext.Provider, {\n    value: contextValue\n  }, children);\n}\n/**\n * Hook to access the {@link SelectSingleContextValue}.\n *\n * This hook is meant to be used inside internal or custom components.\n */\n\n\nfunction useSelectSingle() {\n  var context = useContext(SelectSingleContext);\n\n  if (!context) {\n    throw new Error('useSelectSingle must be used within a SelectSingleProvider');\n  }\n\n  return context;\n}\n/**\n * This hook returns details about the content to render in the day cell.\n *\n *\n * When a day cell is rendered in the table, DayPicker can either:\n *\n * - render nothing: when the day is outside the month or has matched the\n *   \"hidden\" modifier.\n * - render a button when `onDayClick` or a selection mode is set.\n * - render a non-interactive element: when no selection mode is set, the day\n *   cell shouldn’t respond to any interaction. DayPicker should render a `div`\n *   or a `span`.\n *\n * ### Usage\n *\n * Use this hook to customize the behavior of the {@link Day} component. Create a\n * new `Day` component using this hook and pass it to the `components` prop.\n * The source of {@link Day} can be a good starting point.\n *\n */\n\n\nfunction useDayEventHandlers(date, activeModifiers) {\n  var dayPicker = useDayPicker();\n  var single = useSelectSingle();\n  var multiple = useSelectMultiple();\n  var range = useSelectRange();\n\n  var _a = useFocusContext(),\n      focusDayAfter = _a.focusDayAfter,\n      focusDayBefore = _a.focusDayBefore,\n      focusWeekAfter = _a.focusWeekAfter,\n      focusWeekBefore = _a.focusWeekBefore,\n      blur = _a.blur,\n      focus = _a.focus,\n      focusMonthBefore = _a.focusMonthBefore,\n      focusMonthAfter = _a.focusMonthAfter,\n      focusYearBefore = _a.focusYearBefore,\n      focusYearAfter = _a.focusYearAfter,\n      focusStartOfWeek = _a.focusStartOfWeek,\n      focusEndOfWeek = _a.focusEndOfWeek;\n\n  var onClick = function onClick(e) {\n    var _a, _b, _c, _d;\n\n    if (isDayPickerSingle(dayPicker)) {\n      (_a = single.onDayClick) === null || _a === void 0 ? void 0 : _a.call(single, date, activeModifiers, e);\n    } else if (isDayPickerMultiple(dayPicker)) {\n      (_b = multiple.onDayClick) === null || _b === void 0 ? void 0 : _b.call(multiple, date, activeModifiers, e);\n    } else if (isDayPickerRange(dayPicker)) {\n      (_c = range.onDayClick) === null || _c === void 0 ? void 0 : _c.call(range, date, activeModifiers, e);\n    } else {\n      (_d = dayPicker.onDayClick) === null || _d === void 0 ? void 0 : _d.call(dayPicker, date, activeModifiers, e);\n    }\n  };\n\n  var onFocus = function onFocus(e) {\n    var _a;\n\n    focus(date);\n    (_a = dayPicker.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onBlur = function onBlur(e) {\n    var _a;\n\n    blur();\n    (_a = dayPicker.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onMouseEnter = function onMouseEnter(e) {\n    var _a;\n\n    (_a = dayPicker.onDayMouseEnter) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onMouseLeave = function onMouseLeave(e) {\n    var _a;\n\n    (_a = dayPicker.onDayMouseLeave) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onTouchCancel = function onTouchCancel(e) {\n    var _a;\n\n    (_a = dayPicker.onDayTouchCancel) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onTouchEnd = function onTouchEnd(e) {\n    var _a;\n\n    (_a = dayPicker.onDayTouchEnd) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onTouchMove = function onTouchMove(e) {\n    var _a;\n\n    (_a = dayPicker.onDayTouchMove) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onTouchStart = function onTouchStart(e) {\n    var _a;\n\n    (_a = dayPicker.onDayTouchStart) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onKeyUp = function onKeyUp(e) {\n    var _a;\n\n    (_a = dayPicker.onDayKeyUp) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var onKeyDown = function onKeyDown(e) {\n    var _a;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        e.stopPropagation();\n        dayPicker.dir === 'rtl' ? focusDayAfter() : focusDayBefore();\n        break;\n\n      case 'ArrowRight':\n        e.preventDefault();\n        e.stopPropagation();\n        dayPicker.dir === 'rtl' ? focusDayBefore() : focusDayAfter();\n        break;\n\n      case 'ArrowDown':\n        e.preventDefault();\n        e.stopPropagation();\n        focusWeekAfter();\n        break;\n\n      case 'ArrowUp':\n        e.preventDefault();\n        e.stopPropagation();\n        focusWeekBefore();\n        break;\n\n      case 'PageUp':\n        e.preventDefault();\n        e.stopPropagation();\n        e.shiftKey ? focusYearBefore() : focusMonthBefore();\n        break;\n\n      case 'PageDown':\n        e.preventDefault();\n        e.stopPropagation();\n        e.shiftKey ? focusYearAfter() : focusMonthAfter();\n        break;\n\n      case 'Home':\n        e.preventDefault();\n        e.stopPropagation();\n        focusStartOfWeek();\n        break;\n\n      case 'End':\n        e.preventDefault();\n        e.stopPropagation();\n        focusEndOfWeek();\n        break;\n    }\n\n    (_a = dayPicker.onDayKeyDown) === null || _a === void 0 ? void 0 : _a.call(dayPicker, date, activeModifiers, e);\n  };\n\n  var eventHandlers = {\n    onClick: onClick,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onTouchCancel: onTouchCancel,\n    onTouchEnd: onTouchEnd,\n    onTouchMove: onTouchMove,\n    onTouchStart: onTouchStart\n  };\n  return eventHandlers;\n}\n/**\n * Return the current selected days when DayPicker is in selection mode. Days\n * selected by the custom selection mode are not returned.\n *\n * This hook is meant to be used inside internal or custom components.\n *\n */\n\n\nfunction useSelectedDays() {\n  var dayPicker = useDayPicker();\n  var single = useSelectSingle();\n  var multiple = useSelectMultiple();\n  var range = useSelectRange();\n  var selectedDays = isDayPickerSingle(dayPicker) ? single.selected : isDayPickerMultiple(dayPicker) ? multiple.selected : isDayPickerRange(dayPicker) ? range.selected : undefined;\n  return selectedDays;\n}\n\nfunction isInternalModifier(modifier) {\n  return Object.values(InternalModifier).includes(modifier);\n}\n/**\n * Return the class names for the Day element, according to the given active\n * modifiers.\n *\n * Custom class names are set via `modifiersClassNames` or `classNames`,\n * where the first have the precedence.\n */\n\n\nfunction getDayClassNames(dayPicker, activeModifiers) {\n  var classNames = [dayPicker.classNames.day];\n  Object.keys(activeModifiers).forEach(function (modifier) {\n    var customClassName = dayPicker.modifiersClassNames[modifier];\n\n    if (customClassName) {\n      classNames.push(customClassName);\n    } else if (isInternalModifier(modifier)) {\n      var internalClassName = dayPicker.classNames[\"day_\".concat(modifier)];\n\n      if (internalClassName) {\n        classNames.push(internalClassName);\n      }\n    }\n  });\n  return classNames;\n}\n/** Return the style for the Day element, according to the given active modifiers. */\n\n\nfunction getDayStyle(dayPicker, activeModifiers) {\n  var style = _assign({}, dayPicker.styles.day);\n\n  Object.keys(activeModifiers).forEach(function (modifier) {\n    var _a;\n\n    style = _assign(_assign({}, style), (_a = dayPicker.modifiersStyles) === null || _a === void 0 ? void 0 : _a[modifier]);\n  });\n  return style;\n}\n/**\n * Return props and data used to render the {@link Day} component.\n *\n * Use this hook when creating a component to replace the built-in `Day`\n * component.\n */\n\n\nfunction useDayRender(\n/** The date to render. */\nday,\n/** The month where the date is displayed (if not the same as `date`, it means it is an \"outside\" day). */\ndisplayMonth,\n/** A ref to the button element that will be target of focus when rendered (if required). */\nbuttonRef) {\n  var _a;\n\n  var _b, _c;\n\n  var dayPicker = useDayPicker();\n  var focusContext = useFocusContext();\n  var activeModifiers = useActiveModifiers(day, displayMonth);\n  var eventHandlers = useDayEventHandlers(day, activeModifiers);\n  var selectedDays = useSelectedDays();\n  var isButton = Boolean(dayPicker.onDayClick || dayPicker.mode !== 'default'); // Focus the button if the day is focused according to the focus context\n\n  useEffect(function () {\n    var _a;\n\n    if (activeModifiers.outside) return;\n    if (!focusContext.focusedDay) return;\n    if (!isButton) return;\n\n    if (isSameDay(focusContext.focusedDay, day)) {\n      (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [focusContext.focusedDay, day, buttonRef, isButton, activeModifiers.outside]);\n  var className = getDayClassNames(dayPicker, activeModifiers).join(' ');\n  var style = getDayStyle(dayPicker, activeModifiers);\n  var ariaLabel = dayPicker.labels.labelDay(day, activeModifiers, {\n    locale: dayPicker.locale\n  });\n  var isHidden = Boolean(activeModifiers.outside && !dayPicker.showOutsideDays || activeModifiers.hidden);\n  var DayContentComponent = (_c = (_b = dayPicker.components) === null || _b === void 0 ? void 0 : _b.DayContent) !== null && _c !== void 0 ? _c : DayContent;\n  var children = React__default.createElement(DayContentComponent, {\n    date: day,\n    displayMonth: displayMonth,\n    activeModifiers: activeModifiers\n  });\n  var divProps = {\n    style: style,\n    className: className,\n    children: children,\n    'aria-label': ariaLabel\n  };\n  var isFocusTarget = Boolean(focusContext.focusTarget && isSameDay(focusContext.focusTarget, day));\n\n  var buttonProps = _assign(_assign(_assign({}, divProps), (_a = {\n    disabled: activeModifiers.disabled\n  }, _a['aria-pressed'] = activeModifiers.selected, _a['aria-label'] = ariaLabel, _a.tabIndex = isFocusTarget ? 0 : -1, _a)), eventHandlers);\n\n  var dayRender = {\n    isButton: isButton,\n    isHidden: isHidden,\n    activeModifiers: activeModifiers,\n    selectedDays: selectedDays,\n    buttonProps: buttonProps,\n    divProps: divProps\n  };\n  return dayRender;\n}\n/**\n * The content of a day cell – as a button or span element according to its\n * modifiers.\n */\n\n\nfunction Day(props) {\n  var buttonRef = useRef(null);\n  var dayRender = useDayRender(props.date, props.displayMonth, buttonRef);\n\n  if (dayRender.isHidden) {\n    return React__default.createElement(React__default.Fragment, null);\n  }\n\n  if (!dayRender.isButton) {\n    return React__default.createElement(\"div\", _assign({}, dayRender.divProps));\n  }\n\n  return React__default.createElement(Button, _assign({\n    name: \"day\",\n    ref: buttonRef\n  }, dayRender.buttonProps));\n}\n/**\n * Render the week number element. If `onWeekNumberClick` is passed to DayPicker, it\n * renders a button, otherwise a span element.\n */\n\n\nfunction WeekNumber(props) {\n  var weekNumber = props.number,\n      dates = props.dates;\n\n  var _a = useDayPicker(),\n      onWeekNumberClick = _a.onWeekNumberClick,\n      styles = _a.styles,\n      classNames = _a.classNames,\n      locale = _a.locale,\n      labelWeekNumber = _a.labels.labelWeekNumber,\n      formatWeekNumber = _a.formatters.formatWeekNumber;\n\n  var content = formatWeekNumber(Number(weekNumber), {\n    locale: locale\n  });\n\n  if (!onWeekNumberClick) {\n    return React__default.createElement(\"span\", {\n      className: classNames.weeknumber,\n      style: styles.weeknumber\n    }, content);\n  }\n\n  var label = labelWeekNumber(Number(weekNumber), {\n    locale: locale\n  });\n\n  var handleClick = function handleClick(e) {\n    onWeekNumberClick(weekNumber, dates, e);\n  };\n\n  return React__default.createElement(Button, {\n    name: \"week-number\",\n    \"aria-label\": label,\n    className: classNames.weeknumber,\n    style: styles.weeknumber,\n    onClick: handleClick\n  }, content);\n}\n/** Render a row in the calendar, with the days and the week number. */\n\n\nfunction Row(props) {\n  var _a, _b;\n\n  var _c = useDayPicker(),\n      styles = _c.styles,\n      classNames = _c.classNames,\n      showWeekNumber = _c.showWeekNumber,\n      components = _c.components;\n\n  var DayComponent = (_a = components === null || components === void 0 ? void 0 : components.Day) !== null && _a !== void 0 ? _a : Day;\n  var WeeknumberComponent = (_b = components === null || components === void 0 ? void 0 : components.WeekNumber) !== null && _b !== void 0 ? _b : WeekNumber;\n  var weekNumberCell;\n\n  if (showWeekNumber) {\n    weekNumberCell = React__default.createElement(\"td\", {\n      className: classNames.cell,\n      style: styles.cell\n    }, React__default.createElement(WeeknumberComponent, {\n      number: props.weekNumber,\n      dates: props.dates\n    }));\n  }\n\n  return React__default.createElement(\"tr\", {\n    className: classNames.row,\n    style: styles.row\n  }, weekNumberCell, props.dates.map(function (date) {\n    return React__default.createElement(\"td\", {\n      className: classNames.cell,\n      style: styles.cell,\n      key: getUnixTime(date)\n    }, React__default.createElement(DayComponent, {\n      displayMonth: props.displayMonth,\n      date: date\n    }));\n  }));\n}\n/** Return the weeks between two dates.  */\n\n\nfunction daysToMonthWeeks(fromDate, toDate, options) {\n  var toWeek = _endOfWeek(toDate, options);\n\n  var fromWeek = _startOfWeek(fromDate, options);\n\n  var nOfDays = differenceInCalendarDays(toWeek, fromWeek);\n  var days = [];\n\n  for (var i = 0; i <= nOfDays; i++) {\n    days.push(addDays(fromWeek, i));\n  }\n\n  var weeksInMonth = days.reduce(function (result, date) {\n    var weekNumber = getWeek(date, options);\n    var existingWeek = result.find(function (value) {\n      return value.weekNumber === weekNumber;\n    });\n\n    if (existingWeek) {\n      existingWeek.dates.push(date);\n      return result;\n    }\n\n    result.push({\n      weekNumber: weekNumber,\n      dates: [date]\n    });\n    return result;\n  }, []);\n  return weeksInMonth;\n}\n/**\n * Return the weeks belonging to the given month, adding the \"outside days\" to\n * the first and last week.\n */\n\n\nfunction getMonthWeeks(\n/** The month to get the weeks from */\nmonth, options) {\n  var weeksInMonth = daysToMonthWeeks(startOfMonth(month), endOfMonth(month), options); // Add extra weeks to the month, up to 6 weeks\n\n  if (options === null || options === void 0 ? void 0 : options.useFixedWeeks) {\n    var nrOfMonthWeeks = getWeeksInMonth(month, options);\n\n    if (nrOfMonthWeeks < 6) {\n      var lastWeek = weeksInMonth[weeksInMonth.length - 1];\n      var lastDate = lastWeek.dates[lastWeek.dates.length - 1];\n      var toDate = addWeeks(lastDate, 6 - nrOfMonthWeeks);\n      var extraWeeks = daysToMonthWeeks(addWeeks(lastDate, 1), toDate, options);\n      weeksInMonth.push.apply(weeksInMonth, extraWeeks);\n    }\n  }\n\n  return weeksInMonth;\n}\n/** Render the table with the calendar. */\n\n\nfunction Table(props) {\n  var _a, _b, _c;\n\n  var _d = useDayPicker(),\n      locale = _d.locale,\n      classNames = _d.classNames,\n      styles = _d.styles,\n      hideHead = _d.hideHead,\n      fixedWeeks = _d.fixedWeeks,\n      components = _d.components,\n      weekStartsOn = _d.weekStartsOn;\n\n  var weeks = getMonthWeeks(props.displayMonth, {\n    useFixedWeeks: Boolean(fixedWeeks),\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n  var HeadComponent = (_a = components === null || components === void 0 ? void 0 : components.Head) !== null && _a !== void 0 ? _a : Head;\n  var RowComponent = (_b = components === null || components === void 0 ? void 0 : components.Row) !== null && _b !== void 0 ? _b : Row;\n  var FooterComponent = (_c = components === null || components === void 0 ? void 0 : components.Footer) !== null && _c !== void 0 ? _c : Footer;\n  return React__default.createElement(\"table\", {\n    className: classNames.table,\n    style: styles.table,\n    role: \"grid\",\n    \"aria-labelledby\": props['aria-labelledby']\n  }, !hideHead && React__default.createElement(HeadComponent, null), React__default.createElement(\"tbody\", {\n    className: classNames.tbody,\n    style: styles.tbody\n  }, weeks.map(function (week) {\n    return React__default.createElement(RowComponent, {\n      displayMonth: props.displayMonth,\n      key: week.weekNumber,\n      dates: week.dates,\n      weekNumber: week.weekNumber\n    });\n  })), React__default.createElement(FooterComponent, null));\n}\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2018-present, React Training LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\nfunction canUseDOM() {\n  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n}\n/**\n * React currently throws a warning when using useLayoutEffect on the server. To\n * get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect in the browser. We occasionally need useLayoutEffect to\n * ensure we don't get a render flash for certain operations, but we may also\n * need affected components to render on the server. One example is when setting\n * a component's descendants to retrieve their index values.\n *\n * Important to note that using this hook as an escape hatch will break the\n * eslint dependency warnings unless you rename the import to `useLayoutEffect`.\n * Use sparingly only when the effect won't effect the rendered HTML to avoid\n * any server/client mismatch.\n *\n * If a useLayoutEffect is needed and the result would create a mismatch, it's\n * likely that the component in question shouldn't be rendered on the server at\n * all, so a better approach would be to lazily render those in a parent\n * component after client-side hydration.\n *\n * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js\n *\n * @param effect\n * @param deps\n */\n\n\nvar useIsomorphicLayoutEffect = canUseDOM() ? React.useLayoutEffect : React.useEffect;\nvar serverHandoffComplete = false;\nvar id = 0;\n\nfunction genId() {\n  return \"react-day-picker-\".concat(++id);\n}\n\nfunction useId(providedId) {\n  // TODO: Remove error flag when updating internal deps to React 18. None of\n  // our tricks will play well with concurrent rendering anyway.\n  var _a; // If this instance isn't part of the initial render, we don't have to do the\n  // double render/patch-up dance. We can just generate the ID and return it.\n\n\n  var initialId = providedId !== null && providedId !== void 0 ? providedId : serverHandoffComplete ? genId() : null;\n\n  var _b = React.useState(initialId),\n      id = _b[0],\n      setId = _b[1];\n\n  useIsomorphicLayoutEffect(function () {\n    if (id === null) {\n      // Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n      // rendering flicker, though it'll make the first render slower (unlikely\n      // to matter, but you're welcome to measure your app and let us know if\n      // it's a problem).\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  React.useEffect(function () {\n    if (serverHandoffComplete === false) {\n      // Flag all future uses of `useId` to skip the update dance. This is in\n      // `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n      // accidentally bail out of the patch-up dance prematurely.\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return (_a = providedId !== null && providedId !== void 0 ? providedId : id) !== null && _a !== void 0 ? _a : undefined;\n}\n/** Render a month. */\n\n\nfunction Month(props) {\n  var _a;\n\n  var _b;\n\n  var dayPicker = useDayPicker();\n  var dir = dayPicker.dir,\n      classNames = dayPicker.classNames,\n      styles = dayPicker.styles,\n      components = dayPicker.components;\n  var displayMonths = useNavigation().displayMonths;\n  var captionId = useId();\n  var className = [classNames.month];\n  var style = styles.month;\n  var isStart = props.displayIndex === 0;\n  var isEnd = props.displayIndex === displayMonths.length - 1;\n  var isCenter = !isStart && !isEnd;\n\n  if (dir === 'rtl') {\n    _a = [isStart, isEnd], isEnd = _a[0], isStart = _a[1];\n  }\n\n  if (isStart) {\n    className.push(classNames.caption_start);\n    style = _assign(_assign({}, style), styles.caption_start);\n  }\n\n  if (isEnd) {\n    className.push(classNames.caption_end);\n    style = _assign(_assign({}, style), styles.caption_end);\n  }\n\n  if (isCenter) {\n    className.push(classNames.caption_between);\n    style = _assign(_assign({}, style), styles.caption_between);\n  }\n\n  var CaptionComponent = (_b = components === null || components === void 0 ? void 0 : components.Caption) !== null && _b !== void 0 ? _b : Caption;\n  return React__default.createElement(\"div\", {\n    key: props.displayIndex,\n    className: className.join(' '),\n    style: style\n  }, React__default.createElement(CaptionComponent, {\n    id: captionId,\n    displayMonth: props.displayMonth\n  }), React__default.createElement(Table, {\n    \"aria-labelledby\": captionId,\n    displayMonth: props.displayMonth\n  }));\n}\n/** Render the container with the months according to the number of months to display. */\n\n\nfunction Root() {\n  var dayPicker = useDayPicker();\n  var focusContext = useFocusContext();\n  var navigation = useNavigation();\n\n  var _a = useState(false),\n      hasInitialFocus = _a[0],\n      setHasInitialFocus = _a[1]; // Focus the focus target when initialFocus is passed in\n\n\n  useEffect(function () {\n    if (!dayPicker.initialFocus) return;\n    if (!focusContext.focusTarget) return;\n    if (hasInitialFocus) return;\n    focusContext.focus(focusContext.focusTarget);\n    setHasInitialFocus(true);\n  }, [dayPicker.initialFocus, hasInitialFocus, focusContext.focus, focusContext.focusTarget, focusContext]); // Apply classnames according to props\n\n  var classNames = [dayPicker.classNames.root, dayPicker.className];\n\n  if (dayPicker.numberOfMonths > 1) {\n    classNames.push(dayPicker.classNames.multiple_months);\n  }\n\n  if (dayPicker.showWeekNumber) {\n    classNames.push(dayPicker.classNames.with_weeknumber);\n  }\n\n  var style = _assign(_assign({}, dayPicker.styles.root), dayPicker.style);\n\n  return React__default.createElement(\"div\", {\n    className: classNames.join(' '),\n    style: style,\n    dir: dayPicker.dir\n  }, React__default.createElement(\"div\", {\n    className: dayPicker.classNames.months,\n    style: dayPicker.styles.months\n  }, navigation.displayMonths.map(function (month, i) {\n    return React__default.createElement(Month, {\n      key: i,\n      displayIndex: i,\n      displayMonth: month\n    });\n  })));\n}\n/** Provide the value for all the context providers. */\n\n\nfunction RootProvider(props) {\n  var children = props.children,\n      initialProps = __rest(props, [\"children\"]);\n\n  return React__default.createElement(DayPickerProvider, {\n    initialProps: initialProps\n  }, React__default.createElement(NavigationProvider, null, React__default.createElement(SelectSingleProvider, {\n    initialProps: initialProps\n  }, React__default.createElement(SelectMultipleProvider, {\n    initialProps: initialProps\n  }, React__default.createElement(SelectRangeProvider, {\n    initialProps: initialProps\n  }, React__default.createElement(ModifiersProvider, null, React__default.createElement(FocusProvider, null, children)))))));\n}\n/**\n * DayPicker render a date picker component to let users pick dates from a\n * calendar. See http://react-day-picker.js.org for updated documentation and\n * examples.\n *\n * ### Customization\n *\n * DayPicker offers different customization props. For example,\n *\n * - show multiple months using `numberOfMonths`\n * - display a dropdown to navigate the months via `captionLayout`\n * - display the week numbers with `showWeekNumbers`\n * - disable or hide days with `disabled` or `hidden`\n *\n * ### Controlling the months\n *\n * Change the initially displayed month using the `defaultMonth` prop. The\n * displayed months are controlled by DayPicker and stored in its internal\n * state. To control the months yourself, use `month` instead of `defaultMonth`\n * and use the `onMonthChange` event to set it.\n *\n * To limit the months the user can navigate to, use\n * `fromDate`/`fromMonth`/`fromYear` or `toDate`/`toMonth`/`toYear`.\n *\n * ### Selection modes\n *\n * DayPicker supports different selection mode that can be toggled using the\n * `mode` prop:\n *\n * - `mode=\"single\"`: only one day can be selected. Use `required` to make the\n *   selection required. Use the `onSelect` event handler to get the selected\n *   days.\n * - `mode=\"multiple\"`: users can select one or more days. Limit the amount of\n *   days that can be selected with the `min` or the `max` props.\n * - `mode=\"range\"`: users can select a range of days. Limit the amount of days\n *   in the range with the `min` or the `max` props.\n * - `mode=\"default\"` (default): the built-in selections are disabled. Implement\n *   your own selection mode with `onDayClick`.\n *\n * The selection modes should cover the most common use cases. In case you\n * need a more refined way of selecting days, use `mode=\"default\"`. Use the\n * `selected` props and add the day event handlers to add/remove days from the\n * selection.\n *\n * ### Modifiers\n *\n * A _modifier_ represents different styles or states for the days displayed in\n * the calendar (like \"selected\" or \"disabled\"). Define custom modifiers using\n * the `modifiers` prop.\n *\n * ### Formatters and custom component\n *\n * You can customize how the content is displayed in the date picker by using\n * either the formatters or replacing the internal components.\n *\n * For the most common cases you want to use the `formatters` prop to change how\n * the content is formatted in the calendar. Use the `components` prop to\n * replace the internal components, like the navigation icons.\n *\n * ### Styling\n *\n * DayPicker comes with a default, basic style in `react-day-picker/style` – use\n * it as template for your own style.\n *\n * If you are using CSS modules, pass the imported styles object the\n * `classNames` props.\n *\n * You can also style the elements via inline-styles using the `styles` prop.\n *\n * ### Form fields\n *\n * If you need to bind the date picker to a form field, you can use the\n * `useInput` hooks for a basic behavior. See the `useInput` source as an\n * example to bind the date picker with form fields.\n *\n * ### Localization\n *\n * To localize DayPicker, import the locale from `date-fns` package and use the\n * `locale` prop.\n *\n * For example, to use Spanish locale:\n *\n * ```\n * import es from 'date-fns/locale/es';\n * <DayPicker locale={es} />\n * ```\n */\n\n\nfunction DayPicker(props) {\n  return React__default.createElement(RootProvider, _assign({}, props), React__default.createElement(Root, null));\n}\n/** @private */\n\n\nfunction isValidDate(day) {\n  return !isNaN(day.getTime());\n}\n/** Return props and setters for binding an input field to DayPicker. */\n\n\nfunction useInput(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.locale,\n      locale = _a === void 0 ? enUS : _a,\n      required = options.required,\n      _b = options.format,\n      format$1 = _b === void 0 ? 'PP' : _b,\n      defaultSelected = options.defaultSelected,\n      _c = options.today,\n      today = _c === void 0 ? new Date() : _c;\n\n  var _d = parseFromToProps(options),\n      fromDate = _d.fromDate,\n      toDate = _d.toDate; // Shortcut to the DateFns functions\n\n\n  var parseValue = function parseValue(value) {\n    return parse(value, format$1, today, {\n      locale: locale\n    });\n  }; // Initialize states\n\n\n  var _e = useState(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : today),\n      month = _e[0],\n      setMonth = _e[1];\n\n  var _f = useState(defaultSelected),\n      selectedDay = _f[0],\n      setSelectedDay = _f[1];\n\n  var defaultInputValue = defaultSelected ? format(defaultSelected, format$1, {\n    locale: locale\n  }) : '';\n\n  var _g = useState(defaultInputValue),\n      inputValue = _g[0],\n      setInputValue = _g[1];\n\n  var reset = function reset() {\n    setSelectedDay(defaultSelected);\n    setMonth(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : today);\n    setInputValue(defaultInputValue !== null && defaultInputValue !== void 0 ? defaultInputValue : '');\n  };\n\n  var setSelected = function setSelected(date) {\n    setSelectedDay(date);\n    setMonth(date !== null && date !== void 0 ? date : today);\n    setInputValue(date ? format(date, format$1, {\n      locale: locale\n    }) : '');\n  };\n\n  var handleDayClick = function handleDayClick(day, _a) {\n    var selected = _a.selected;\n\n    if (!required && selected) {\n      setSelectedDay(undefined);\n      setInputValue('');\n      return;\n    }\n\n    setSelectedDay(day);\n    setInputValue(day ? format(day, format$1, {\n      locale: locale\n    }) : '');\n  };\n\n  var handleMonthChange = function handleMonthChange(month) {\n    setMonth(month);\n  }; // When changing the input field, save its value in state and check if the\n  // string is a valid date. If it is a valid day, set it as selected and update\n  // the calendar’s month.\n\n\n  var handleChange = function handleChange(e) {\n    setInputValue(e.target.value);\n    var day = parseValue(e.target.value);\n    var isBefore = fromDate && differenceInCalendarDays(fromDate, day) > 0;\n    var isAfter = toDate && differenceInCalendarDays(day, toDate) > 0;\n\n    if (!isValidDate(day) || isBefore || isAfter) {\n      setSelectedDay(undefined);\n      return;\n    }\n\n    setSelectedDay(day);\n    setMonth(day);\n  }; // Special case for _required_ fields: on blur, if the value of the input is not\n  // a valid date, reset the calendar and the input value.\n\n\n  var handleBlur = function handleBlur(e) {\n    var day = parseValue(e.target.value);\n\n    if (!isValidDate(day)) {\n      reset();\n    }\n  }; // When focusing, make sure DayPicker visualizes the month of the date in the\n  // input field.\n\n\n  var handleFocus = function handleFocus(e) {\n    if (!e.target.value) {\n      reset();\n      return;\n    }\n\n    var day = parseValue(e.target.value);\n\n    if (isValidDate(day)) {\n      setMonth(day);\n    }\n  };\n\n  var dayPickerProps = {\n    month: month,\n    onDayClick: handleDayClick,\n    onMonthChange: handleMonthChange,\n    selected: selectedDay,\n    locale: locale,\n    fromDate: fromDate,\n    toDate: toDate,\n    today: today\n  };\n  var inputProps = {\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    value: inputValue,\n    placeholder: format(new Date(), format$1, {\n      locale: locale\n    })\n  };\n  return {\n    dayPickerProps: dayPickerProps,\n    inputProps: inputProps,\n    reset: reset,\n    setSelected: setSelected\n  };\n}\n/** Returns true when the props are of type {@link DayPickerDefaultProps}. */\n\n\nfunction isDayPickerDefault(props) {\n  return props.mode === undefined || props.mode === 'default';\n}\n\nexport { Button, Caption, CaptionDropdowns, CaptionLabel, CaptionNavigation, Day, DayContent, DayPicker, DayPickerContext, DayPickerProvider, Dropdown, FocusContext, FocusProvider, Footer, Head, HeadRow, IconDropdown, IconLeft, IconRight, InternalModifier, NavigationContext, NavigationProvider, RootProvider, Row, SelectMultipleContext, SelectMultipleProvider, SelectMultipleProviderInternal, SelectRangeContext, SelectRangeProvider, SelectRangeProviderInternal, SelectSingleContext, SelectSingleProvider, SelectSingleProviderInternal, WeekNumber, addToRange, isDateAfterType, isDateBeforeType, isDateInterval, isDateRange, isDayOfWeekType, isDayPickerDefault, isDayPickerMultiple, isDayPickerRange, isDayPickerSingle, isMatch, useActiveModifiers, useDayPicker, useDayRender, useFocusContext, useInput, useNavigation, useSelectMultiple, useSelectRange, useSelectSingle }; //# sourceMappingURL=index.esm.js.map","map":null,"metadata":{},"sourceType":"module"}